#! /usr/bin/env perl
#
# Author Eric Vaandering (ewv@fnal.gov)
#

# Usage: MigrateV5 --u=username --p=password --a=init|migrate|delete

use DBI;
use Getopt::Long;

require "CGIInclude.pm";

require "DocDBGlobals.pm";

&GetOptions("a=s" => \$Action,"u=s" => \$User,"p=s" => \$Password);

# In V6, e-mail notifications are secure, in that people won't get notified 
# about documents from groups they don't belong to. If you use the new 
# certificate security, it's based on what groups they request and the admins
# confirm. For new users in the http authorization scheme, the group they 
# belong to will be taken from the username and password they provide. 
# For existing users, you have to supply a default group here. In any case, 
# you can always add or change the groups a user belongs to.
# Replace Group1,Group2, etc. with the groups you want your existing 
# "Email Users" to belong to. If you make the list blank
# "... = ()" no group will be selected and effectively no users will get e-mail
# until you set up groups.

# Also, set $VerifyAllUsers = 0 if you don't want to initially start will 
# all of your users in the verified state (only verified users can receive 
# e-mail).

my @DefaultMailGroups   = ("Group1","Group2");
my $VerifyAllUsers      = 1;

unless ($Action eq "init" or $Action eq "delete" or $Action eq "migrate") {
  print "Usage: MigrateV6 --u=username --p=password --a=init|migrate|delete\n\n";
  print "This script is used to migrate from a version 5 to version 6 DB structure. \n";
  print "Run this script in \"init\" mode first, then update the DocDB code.\n";
  print "Then run this script again in \"migrate\" mode. \n";
  print "You will likely want to edit the script before running in migrate mode.  \n\n";
  print "For this upgrade there is no delete step.  \n\n";
#  print "Run this script in \"init\" mode first, then in \"migrate\" mode.  \n\n";
#  print "At this point you can update the CGI code and when you are comfortable  \n";
#  print "everything is OK, run in \"delete\" mode to erase old columns and/or tables.  \n";
 exit;
}  

$dbh   = DBI->connect('DBI:mysql:'.$db_name.':'.$db_host,$User,$Password);

if ($Action eq "init") { # Modify existing tables and add new tables in preparation for migration 

# Meeting expansion

  my $EmailUserAdd  = $dbh -> prepare("alter table EmailUser add Verified int"); 
  my $EmailUserAdd2 = $dbh -> prepare("alter table EmailUser add AuthorID int"); 

  my $UsersGroupCreate = $dbh -> prepare("create table UsersGroup ".
                   "(UsersGroupID integer auto_increment primary key,".
                   " EmailUserID integer, GroupID integer,".
                   " TimeStamp timestamp,".
                   " index(EmailUserID))"); 

  $EmailUserAdd             -> execute();
  $EmailUserAdd2            -> execute();
  $UsersGroupCreate         -> execute();
  
}

if ($Action eq "migrate") {
  require "NotificationSQL.pm";
  require "SecuritySQL.pm"; 
  if ($VerifyAllUsers) {
    my $EmailUserUpdate  = $dbh -> prepare("update EmailUser set Verified=1 where EmailUserID>0"); 
    $EmailUserUpdate -> execute();
  }
  
  my @EmailUserIDs = &GetEmailUserIDs();
  my $EmailUserInsert = $dbh -> prepare("insert into UsersGroup (UsersGroupID,EmailUserID,GroupID) values (0,?,?)"); 
   
  foreach my $EmailUserID (@EmailUserIDs) {
    foreach my $Group (@DefaultMailGroups) {
      my $GroupID = &FetchSecurityGroupByName($Group); 
      if ($GroupID) { 
        $EmailUserInsert -> execute($EmailUserID,$GroupID);
      } else {
        print "Group $Group not found. Skipping.\n";
      }   
    } 
  }
}

if ($Action eq "delete") { 
  print "No deletions necessary.\n";
}

exit;
