#! /usr/bin/perl

use XML::Twig;

require "CopySetup.pm"; # Passwords


my $DoUpload   = 1; # Test first
my @OrigDocIDs = (524,893..894);


unlink "/tmp/DocDB.xml";
unlink "/tmp/NewDocDB.xml";
unlink "/tmp/ReturnDocDB.xml";

foreach my $OrigDocID (@OrigDocIDs) {

# Download latest XML file from source DocDB

  my $OriginalURL = $SourceURL."ShowDocument?docid=$OrigDocID;outformat=xml";
  my @Command = ("wget","-q","-O","/tmp/DocDB.xml","--no-check-certificate");
  if ($SourceUser) {
    push @Command,"--http-user=$SourceUser","--http-password=$SourcePassword"
  }
  push @Command,$OriginalURL;
  system @Command;

  # Read and parse input file

  my $Twig = XML::Twig -> new();
  $Twig -> safe_parsefile("/tmp/DocDB.xml");
  $XML = $Twig -> root();
  unlink "/tmp/DocDB.xml";

  # Get DocumentID and version #'s

  my $Document = $XML -> first_child("document");
  my $DocID     = $Document -> {'att'} -> {'id'};
  my $Revision  = $Document -> first_child("docrevision");
  my $OtherRevs = $Revision -> first_child("otherversions");
  my @Revisions = $OtherRevs -> children("docrevision");

  my @Versions = ();

  foreach my $Revision (@Revisions) {
    my $Version = $Revision -> {'att'} -> {'version'};
    push @Versions,$Version;
  }
  @Versions = sort numerically @Versions;
  my $NewDocID = 0;
  my $Mode     = "new";
  foreach my $Version (@Versions) {

    my $OriginalURL = $SourceURL."ShowDocument?docid=$OrigDocID;version=$Version;outformat=xml";
    my @Command = ("wget","-q","-O","/tmp/DocDB.xml","--no-check-certificate");
    if ($SourceUser) {
      push @Command,"--http-user=$SourceUser","--http-password=$SourcePassword"
    }
    push @Command,$OriginalURL;
    system @Command;

      # Modify XML

    my $Twig = XML::Twig -> new();
    $Twig -> safe_parsefile("/tmp/DocDB.xml");
    $XML = $Twig -> root();
    unlink "/tmp/DocDB.xml";

    my $Document = $XML -> first_child("document");
    my $DocID     = $Document -> {'att'} -> {'id'};

    my $Revision  = $Document -> first_child("docrevision");
    my $Version = $Revision -> {'att'} -> {'version'};
    print "Fetched DocumentID $DocID, version $Version\n";

    if ($DoUpload) {
      $Document -> {'att'} -> {'id'} = $NewDocID;
      # Remove ID numbers from submitter and authors (lookup will handle this)

      my $Submitter = $Revision -> first_child("submitter");
      $Submitter -> del_att('id');

      my @Authors = $Revision -> children("author");
      foreach my $Author (@Authors) {
        $Author -> del_att('id');
      }

      my %Attributes = ();

      my $ControlXML = XML::Twig::Elt -> new(control => \%Attributes );
      my $ModeXML    = XML::Twig::Elt -> new("mode", $Mode);    # new or bump
      my $ModeXML    = XML::Twig::Elt -> new("usedate", "yes"); # preserve dates
      $ModeXML -> paste(last_child => $ControlXML);
      $ControlXML -> paste(last_child => $XML);

      my $AuthenticationXML = XML::Twig::Elt -> new(authentication => \%Attributes );
      my $UserXML    = XML::Twig::Elt -> new("username", $SourceUser);
      my $PassXML    = XML::Twig::Elt -> new("password", $SourcePassword);
      $UserXML -> paste(last_child => $AuthenticationXML);
      $PassXML -> paste(last_child => $AuthenticationXML);
      $AuthenticationXML -> paste(last_child => $XML);

      open DEST,">/tmp/NewDocDB.xml";
      print DEST ($XML -> sprint()),"\n";
      close DEST;

      my $SubmitURL   = $DestURL."XMLUpload";
      my @Upload = ("curl","-o","/tmp/ReturnDocDB.xml","-F","outformat=xml","-F","XMLFile=@/tmp/NewDocDB.xml",
                    "-u","$DestUser:$DestPassword",$SubmitURL);
      system @Upload;

      unless ($NewDocID) {
        my $Twig = XML::Twig -> new();
        $Twig -> safe_parsefile("/tmp/ReturnDocDB.xml");
        $XML = $Twig -> root();
        unlink "/tmp/ReturnDocDB.xml";

        my $Document = $XML -> first_child("document");
        my $DocID     = $Document -> {'att'} -> {'id'};

        if ($DocID) {
          $NewDocID = $DocID;
          $Mode = "bump";
          print "Created new DocumentID $DocID\n";
        }
      }
    }
  }
}

exit;

sub numerically {$a <=> $b;}
