#! /usr/bin/env perl
#
# Author Eric Vaandering (ewv@fnal.gov)
#

# Usage: MigrateV5 --u=username --p=password --a=init|migrate|delete

use DBI;
use Getopt::Long;

require "CGIInclude.pm";

require "DocDBGlobals.pm";

&GetOptions("a=s" => \$Action,"u=s" => \$User,"p=s" => \$Password);

# In V7


unless ($Action eq "init" or $Action eq "delete" or $Action eq "migrate" or $Action eq "undo") {
  print "Usage: MigrateV7 --u=username --p=password --a=init|migrate|delete\n\n";
  print "This script is used to migrate from a version 6 to version 7 DB structure. \n";
  print "Run this script in \"init\" mode first, then update the DocDB code.\n";
  print "Then run this script again in \"migrate\" mode. \n";
  print "At this point you can update the CGI code and when you are comfortable  \n";
  print "everything is OK, run in \"delete\" mode to erase old columns and/or tables.  \n";
 exit;
}  

$dbh   = DBI->connect('DBI:mysql:'.$db_name.':'.$db_host,$User,$Password);

if ($Action eq "init") { # Modify existing tables and add new tables in preparation for migration 

# User based access
  my $XRefAdd1     = $dbh ->prepare("alter table DocXRef add Version int"); 
  my $XRefAdd2     = $dbh ->prepare("alter table DocXRef add Project varchar(32)"); 
  my $XRefCreate   = $dbh -> prepare("create table ExternalDocDB ".
                   "(ExternalDocDBID integer auto_increment primary key,".
                   " Project varchar(32), Description varchar(255),".
                   " PublicURL varchar(255),PrivateURL varchar(255),".
                   " TimeStamp timestamp(14))"); 
  my $NotifyCreate = $dbh -> prepare("create table Notification ".
                   "(NotificationID integer auto_increment primary key,".
                   " EmailUserID int, Type varchar(32), ".
                   " ForeignID int, Interval varchar(32),".
                   " TimeStamp timestamp(14), ".
                   " KEY EmailUserID (EmailUserID), KEY ForeignID (ForeignID))"); 
  my $DocumentAdd  = $dbh -> prepare("alter table Document add DocHash char(32)"); 

  my $ConfigCreate1 =  $dbh -> prepare("create table ConfigSetting ".
                    "(ConfigSettingID integer auto_increment primary key,".
                    " Group varchar(64),     Sub1Group varchar(64) ".
                    " Sub2Group varchar(64), Sub3Group varchar(64), Sub4Group varchar(64) ".
                    " ForeignID int, Value varchar(64),".
                    " Sub1Value varchar(64), Sub2Value varchar(64), Sub3Value varchar(64), ".
                    " Sub4Value varchar(64), Sub5Value varchar(64), ".
                    " Description text, Constrained int, ".
                    " TimeStamp timestamp(14), ".
                    " KEY Group (Group), KEY Sub1Group (Sub1Group), KEY ForeignID (ForeignID))"); 
  my $ConfigCreate2 =  $dbh -> prepare("create table ConfigValue ".
                    "(ConfigValueID integer auto_increment primary key,".
                    " ConfigSettingID int ".
                    " Value varchar(64),".
                    " Description text, ".
                    " TimeStamp timestamp(14), ".
                    " KEY ConfigSettingID (ConfigSettingID))"); 



  my $RevisionAdd  = $dbh -> prepare("alter table DocumentRevision add DocTypeID int"); 

  $RevisionAdd      -> execute();
  $XRefAdd1         -> execute();
  $XRefAdd2         -> execute();
  $XRefCreate       -> execute();
  $NotifyCreate     -> execute();
  $ConfigCreate1    -> execute();
  $ConfigCreate2    -> execute();
  $DocumentAdd      -> execute();
}

if ($Action eq "migrate") {
  require "DocumentSQL.pm";
  &GetAllDocuments;

  my @DocumentIDs = sort keys %Documents;
  my $RevisionUpdate = $dbh -> prepare("update DocumentRevision set DocTypeID=?,TimeStamp=? where DocRevID=?"); 
  my $RevisionSelect = $dbh -> prepare("select DocRevID,Timestamp from DocumentRevision where DocumentID=?");  
  my $DocumentSelect = $dbh -> prepare("select DocumentType from Document where DocumentID=?");  
  foreach my $DocumentID (@DocumentIDs) {
    unless ($DocumentID) {next;} # Null documentID in test DB
    my ($DocRevID,$TimeStamp);
    $DocumentSelect -> execute($DocumentID);
    my ($DocTypeID) = $DocumentSelect -> fetchrow_array;
    
    unless ($DocumentID % 100) {
      print "Updating Document $DocumentID, DocTypeID $DocTypeID\n";
    }   
    # Do revision by revision to keep TimeStamps in sync
    
    $RevisionSelect -> execute($DocumentID);
    $RevisionSelect -> bind_columns(undef, \($DocRevID,$TimeStamp));
    while ($RevisionSelect -> fetch) {
      $RevisionUpdate -> execute($DocTypeID,$TimeStamp,$DocRevID);
    }
  }  
}

if ($Action eq "undo") { # Undo modifications

# User based access

  my $RevisionDrop  = $dbh -> prepare("alter table DocumentRevision drop DocTypeID"); 
  my $XRefDrop1     = $dbh -> prepare("alter table DocXRef drop Version"); 
  my $XRefDrop2     = $dbh -> prepare("alter table DocXRef drop Project"); 
  my $XRefDrop3     = $dbh -> prepare("drop table ExternalDocDB"); 
  my $NotifyDrop    = $dbh -> prepare("drop table Notification"); 
  my $ConfigDrop1   = $dbh -> prepare("drop table ConfigSetting"); 
  my $ConfigDrop2   = $dbh -> prepare("drop table ConfigValue"); 
  my $DocumentDrop  = $dbh -> prepare("alter table Document drop DocHash"); 
  
  $XRefDrop1         -> execute();
  $XRefDrop2         -> execute();
  $XRefDrop3         -> execute();
  $NotifyDrop        -> execute();
  $ConfigDrop1       -> execute();
  $ConfigDrop2       -> execute();
  $DocumentDrop      -> execute();
  $RevisionDrop      -> execute();
}

if ($Action eq "delete") { 
#  my $DocTypeDel    = $dbh -> prepare("alter table Document drop DocumentType"); 
  
#  $DocTypeDel -> execute();
}

exit;
