#! /usr/bin/env perl
#
# Author Eric Vaandering (ewv@fnal.gov)
#

# Usage: MigrateV5 --u=username --p=password --a=init|migrate|delete


# Copyright 2001-2006 Eric Vaandering, Lynn Garren, Adam Bryant

#    This file is part of DocDB.

#    DocDB is free software; you can redistribute it and/or modify
#    it under the terms of version 2 of the GNU General Public License 
#    as published by the Free Software Foundation.

#    DocDB is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU General Public License for more details.

#    You should have received a copy of the GNU General Public License
#    along with DocDB; if not, write to the Free Software
#    Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA

use DBI;
use Getopt::Long;

require "CGIInclude.pm";

require "DocDBGlobals.pm";

&GetOptions("a=s" => \$Action,"u=s" => \$User,"p=s" => \$Password);

# Here, replace Group1,Group2, etc. with the groups you want to give view or 
# modify access to  all your existing meetings. If you make the list blank
# "... = ()" any group that can create documents can modify all the meetings
# and all the meetings will be publically viewable.

# Deviations from this must be fixed by hand with the meeting organizer.

my @DefaultViewGroups   = ("Group1","Group2");
my @DefaultModifyGroups = ("Group1","Group2");

unless ($Action eq "init" or $Action eq "delete" or $Action eq "migrate") {
  print "Usage: MigrateV5 --u=username --p=password --a=init|migrate|delete\n\n";
  print "This script is used to migrate from a version 4 to version 5 DB structure. \n";
  print "Run this script in \"init\" mode first, then update the DocDB code.\n";
  print "Then run this script again in \"migrate\" mode. \n";
  print "You will likely want to edit the script before running in migrate mode.  \n\n";
  print "For this upgrade there is no delete step.  \n\n";
#  print "Run this script in \"init\" mode first, then in \"migrate\" mode.  \n\n";
#  print "At this point you can update the CGI code and when you are comfortable  \n";
#  print "everything is OK, run in \"delete\" mode to erase old columns and/or tables.  \n";
 exit;
}  

$dbh   = DBI->connect('DBI:mysql:'.$db_name.':'.$db_host,$User,$Password);

if ($Action eq "init") { # Modify existing tables and add new tables in preparation for migration 

### Edit the first line if you have a different admin account

# Meeting expansion

  my $SessionAdd   = $dbh -> prepare("alter table Session add ShowAllTalks Integer"); 
  my $RevisionAdd  = $dbh -> prepare("alter table DocumentRevision add Note text"); 
  my $RevisionAdd2 = $dbh -> prepare("alter table DocumentRevision add Demanaged int"); 
  my $KeywordDel   = $dbh -> prepare("alter table Keyword drop KeywordGroupID"); 
  my $EmailUserAdd = $dbh -> prepare("alter table EmailUser add CanSign int"); 

  my $SignoffCreate = $dbh -> prepare("create table Signoff ".
                   "(SignoffID integer auto_increment primary key,".
                   " DocRevID integer, Note text,".
                   " TimeStamp timestamp,".
                   " index(DocRevID))"); 

  my $SignatureCreate = $dbh -> prepare("create table Signature ".
                   "(SignatureID integer auto_increment primary key,".
                   " EmailUserID integer, SignoffID integer, Note text,".
                   " Signed integer, TimeStamp timestamp,".
                   " index(EmailUserID), index(SignoffID))"); 

  my $SignoffDependencyCreate = $dbh -> prepare("create table SignoffDependency ".
                   "(SignoffDependencyID integer auto_increment primary key,".
                   " SignoffID integer, PreSignoffID integer, ".
                   " TimeStamp timestamp,".
                   " index(SignoffID), index(PreSignoffID))"); 

  my $EmailDocImmedCreate = $dbh -> prepare("create table EmailDocumentImmediate ".
                   "(EmailDocumentImmediateID integer auto_increment primary key,".
                   " EmailUserID integer, DocumentID integer, ".
                   " TimeStamp timestamp,".
                   " index(EmailUserID), index(DocumentID))"); 

  $SessionAdd               -> execute();
  $RevisionAdd              -> execute();
  $RevisionAdd2             -> execute();
  $KeywordDel               -> execute();
  $SignoffCreate            -> execute();
  $SignatureCreate          -> execute();
  $SignoffDependencyCreate  -> execute();
  $EmailDocImmedCreate      -> execute();
  $EmailUserAdd             -> execute();
  
}

if ($Action eq "migrate") {
  require "SecuritySQL.pm"; 
  my @ViewGroupIDs = ();
  foreach my $Group (@DefaultViewGroups) {
    my $GroupID = &FetchSecurityGroupByName($Group); 
    if ($GroupID) { 
      push @ViewGroupIDs,$GroupID;  
    } else {
      print "Group $Group not found. Skipping.\n";
    }   
  } 
  my @ModifyGroupIDs = ();
  foreach my $Group (@DefaultModifyGroups) {
    my $GroupID = &FetchSecurityGroupByName($Group); 
    if ($GroupID) { 
      push @ModifyGroupIDs,$GroupID;  
    } else {
      print "Group $Group not found. Skipping.\n";
    }   
  } 
  
  my $ConferenceID;
  my $ConferenceSelect = $dbh -> prepare("select ConferenceID from Conference");
  my $ViewInsert       = $dbh -> prepare("insert into MeetingSecurity (MeetingSecurityID,ConferenceID,GroupID) values (0,?,?)");
  my $ModifyInsert     = $dbh -> prepare("insert into MeetingModify   (MeetingModifyID,ConferenceID,GroupID)   values (0,?,?)");
     $ConferenceSelect -> execute();
     $ConferenceSelect -> bind_columns(undef, \($ConferenceID));
  while ($ConferenceSelect -> fetch) {
    foreach my $GroupID (@ViewGroupIDs) { 
      $ViewInsert -> execute ($ConferenceID,$GroupID);
    }  
    foreach my $ModGroupID (@ModifyGroupIDs) { 
      $ModifyInsert -> execute ($ConferenceID,$ModGroupID);
    }  
  }
}

if ($Action eq "delete") { 
  print "No deletions necessary.\n";
}

exit;
