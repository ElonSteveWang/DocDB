#! /usr/bin/env perl
#
# Author Eric Vaandering (ewv@fnal.gov)
#

# Usage: MigrateV3


# Copyright 2001-2006 Eric Vaandering, Lynn Garren, Adam Bryant

#    This file is part of DocDB.

#    DocDB is free software; you can redistribute it and/or modify
#    it under the terms of version 2 of the GNU General Public License 
#    as published by the Free Software Foundation.

#    DocDB is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU General Public License for more details.

#    You should have received a copy of the GNU General Public License
#    along with DocDB; if not, write to the Free Software
#    Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA

use DBI;
use Getopt::Long;

require "CGIInclude.pm";

require "DocDBGlobals.pm";

&GetOptions("a=s" => \$Action,"u=s" => \$User,"p=s" => \$Password);

unless ($Action eq "init" or $Action eq "delete" or $Action eq "migrate") {
  print "Usage: MigrateV3 --u=username --p=password --a=init|migrate|delete\n\n";
  print "This script is used to migrate from a version 2 to version 3 DB structure. \n";
  print "It adds the administer field to the DB and new tables for multiple journal \n";
  print "references and the (optional) enhanced security model. \n\n";
  print "If you have named your primary administration account anything other than\n";
  print "\"docdbadm\"  you must edit this file first. \n\n";
  print "Run this script in \"init\" mode first, then in \"migrate\" mode.  \n\n";
  print "At this point you can update the CGI code and when you are comfortable  \n";
  print "everything is OK, run in \"delete\" mode to erase old columns and/or tables.  \n";
 exit;
}  

$dbh   = DBI->connect('DBI:mysql:'.$db_name.':'.$db_host,$User,$Password);

if ($Action eq "init") { # Modify existing tables and add new tables in preparation for migration 

### Edit the first line if you have a different admin account

  my $AdminSet     = $dbh -> prepare("update SecurityGroup set CanAdminister=1 where lower(Name) like \"docdbadm\""); 
  my $AdminAdd     = $dbh -> prepare("alter table SecurityGroup add CanAdminister integer default 0"); 

  my $ModifyCreate = $dbh -> prepare("create table RevisionModify ".
                   "(RevModifyID integer auto_increment primary key,".
                   " GroupID integer, DocRevID integer, TimeStamp timestamp,".
                   " index(GroupID),index(DocRevID))"); 
  my $RefCreate    = $dbh -> prepare("create table RevisionReference ".
                   "(ReferenceID integer auto_increment primary key,".
                   " DocRevID integer,JournalID integer, Volume char(32), Page char(32), TimeStamp timestamp,".
                   " index(JournalID),index(DocRevID))"); 
                   
  $AdminAdd     -> execute();
  $AdminSet     -> execute();
  $ModifyCreate -> execute();               
  $RefCreate    -> execute(); 
}

if ($Action eq "migrate") {
  my ($DocRevID,$JournalID,$Volume,$Page);
  my $RevisionList  = $dbh -> prepare(
     "select DocRevID,JournalID,Volume,Page from DocumentRevision where JournalID>0"); 
  my $ReferenceInsert  = $dbh -> prepare(
     "insert into RevisionReference (ReferenceID,DocRevID,JournalID,Volume,Page) values (0,?,?,?,?)"); 
  $RevisionList -> execute;
  $RevisionList -> bind_columns(undef, \($DocRevID,$JournalID,$Volume,$Page));
  while ($RevisionList -> fetch) {
    $ReferenceInsert -> execute($DocRevID,$JournalID,$Volume,$Page);
  }
}

if ($Action eq "delete") { # Drop useless columns 
  my $JournalDel = $dbh -> prepare("alter table DocumentRevision drop JournalID"); 
  my $VolumeDel  = $dbh -> prepare("alter table DocumentRevision drop Volume"); 
  my $PageDel    = $dbh -> prepare("alter table DocumentRevision drop Page"); 
  
  $JournalDel -> execute();
  $VolumeDel  -> execute();
  $PageDel    -> execute();
}

exit;
