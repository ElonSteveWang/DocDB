#! /usr/bin/env perl
#
# Author Eric Vaandering (ewv@fnal.gov)
#

# Usage: NotifyDigest -t Weekly|Daily

use DBI;
use Getopt::Long;

require "CGIInclude.pm";

require Mail::Mailer;
require Mail::Send;

require "DocDBGlobals.pm";
require "TopicSQL.pm";
require "DocumentSQL.pm";
require "RevisionSQL.pm";
require "AuthorSQL.pm";
require "NotificationSQL.pm";
require "MailNotification.pm";
require "Sorts.pm";

&GetOptions("t=s" => \$Set);

unless ($Set eq "Weekly" or $Set eq "Daily") {
  print "Usage: NotifyDigest -t Weekly|Daily\n";
  exit;
}  

my $Days;
if ($Set eq "Weekly") {
  $Days  = 7;
} elsif ($Set eq "Daily") {
  $Days = 1;
}

$dbh   = DBI->connect('DBI:mysql:'.$db_name.':'.$db_host,$db_rouser,$db_ropass);

&GetTopics;

my $EmailUserID;
my @EmailUserIDs;

# Find all users of e-mail notification

my $EmailIDQuery = $dbh -> prepare("select EmailUserID from EmailUser");
$EmailIDQuery -> execute();
$EmailIDQuery -> bind_columns(undef,\($EmailUserID));
while ($EmailIDQuery -> fetch) {
  push @EmailUserIDs,$EmailUserID;
}

# Get the complete list of modified document revisions

my @AllDocRevIDs    = ();
my $RevisionList = $dbh -> prepare("select DocRevID from DocumentRevision where Obsolete=0 and TO_DAYS(NOW())-TO_DAYS(Timestamp)<=?"); 
$RevisionList -> execute($Days);
$RevisionList -> bind_columns(undef, \($DocRevID));
while ($RevisionList -> fetch) {
  &FetchDocRevisionByID($DocRevID);
  push @AllDocRevIDs,$DocRevID;

# Get the topics for each modified revision
  my @MinorRevTopics = &GetRevisionTopics($DocRevID);
  my %MajorRevTopics = ();
  foreach $MinorRevTopic (@MinorRevTopics) {
    $MajorRevTopics{$MinorTopics{$MinorRevTopicID}{MAJOR}} = 1;
  } 
  $AllMinorTopics{$DocRevID} = [@MinorRevTopics];
  $AllMajorTopics{$DocRevID} = [keys %MajorRevTopics];
# Get the authors and keywords for each modified revision
  my @RevisionAuthorIDs = &GetRevisionAuthors($DocRevID);
  my @RevisionKeywords  = split /\s+/,$DocRevisions{$DocRevID}{Keywords};
  $AllAuthorIDs{$DocRevID} = [@RevisionAuthorIDs];
  $AllKeywords{$DocRevID}  = [@RevisionKeywords];
}

# Build a personal E-mail for each user

foreach $EmailUserID (@EmailUserIDs) {

# What is the user interested in

  &FetchEmailUser($EmailUserID);
  print "Preparing mail for $EmailUser{$EmailUserID}{Name}\n";
  unless ($EmailUser{$EmailUserID}{EmailAddress}) {next;}

  &FetchTopicNotification($EmailUserID,$Set);
  my @UserMinorTopics = @NotifyMinorIDs;
  my @UserMajorTopics = @NotifyMajorIDs;
  my $NotifyAll       = $NotifyAllTopics;

  &FetchAuthorNotification($EmailUserID,$Set);
  my @UserAuthorIDs   = @NotifyAuthorIDs;
  
  &FetchKeywordNotification($EmailUserID,$Set);
  my @UserKeywords    = @NotifyKeywords;

# See if the new docs match the user's requirements

  my %SelectDocRevIDs = ();
  REVISION: foreach $DocRevID (@AllDocRevIDs) {
    if ($NotifyAll) {
      $SelectDocRevIDs{$DocRevID} = 1; # They want them all
      next REVISION;
    }
    foreach my $RevMinorTopic (@{$AllMinorTopics{$DocRevID}}) {
      foreach my $UserMinorTopic (@UserMinorTopics) {
        if ($RevMinorTopic == $UserMinorTopic) {
          $SelectDocRevIDs{$DocRevID} = 1; # They want this minor topic
          next REVISION
        }
      }    
    }
    foreach my $RevMajorTopic (@{$AllMajorTopics{$DocRevID}}) {
      foreach my $UserMajorTopic (@UserMajorTopics) {
        if ($RevMajorTopic == $UserMajorTopic) {
          $SelectDocRevIDs{$DocRevID} = 1; # They want this major topic
          next REVISION
        }
      }    
    }
    foreach my $RevAuthorID (@{$AllAuthorIDs{$DocRevID}}) {
      foreach my $UserAuthorID (@UserAuthorIDs) {
        if ($RevAuthorID == $UserAuthorID) {
          $SelectDocRevIDs{$DocRevID} = 1; # They want this author
          next REVISION
        }
      }    
    }
    foreach my $RevKeyword (@{$AllKeywords{$DocRevID}}) {
      $RevKeyword =~ tr/[A-Z]/[a-z]/;
      foreach my $UserKeyword (@UserKeywords) {
        $UserKeyword =~ tr/[A-Z]/[a-z]/;
        if ($RevKeyword eq $UserKeyword) {
          $SelectDocRevIDs{$DocRevID} = 1; # They want this keyword
          next REVISION
        }
      }    
    }
  }

# We now have all the DocRevIDs, convert to Document numbers  

  my @SelectDocRevIDs = keys %SelectDocRevIDs;

  my %DocumentIDs     = (); # Hash removes duplicates
  foreach my $DocRevID (@SelectDocRevIDs) {
    $DocumentID = $DocRevisions{$DocRevID}{DOCID};
    $DocumentIDs{$DocumentID} = 1; 
  }
  my @DocumentIDs = sort numerically keys %DocumentIDs;
  
  if (@DocumentIDs) {
    print "$EmailUser{$EmailUserID}{Name} will receive mails on documents ",join ' ',@DocumentIDs,"\n";

# Write the mail
  
    $Mailer = new Mail::Mailer 'smtp', Server => $MailServer;
#    $Mailer = new Mail::Mailer 'test', Server => $MailServer;

    $Headers{To} = $EmailUser{$EmailUserID}{EmailAddress};
    $Headers{From} = "$Project Document Database <$DBWebMasterEmail>";
    $Headers{Subject} = "$Set changes to $Project DocDB";
    $Mailer -> open(\%Headers);    # Start mail with headers
    print $Mailer "The following documents in the $Project Document Database were added or changed ";
    if ($Set eq "Daily") {
      print $Mailer "yesterday:\n\n";
    } elsif ($Set eq "Weekly") {
      print $Mailer "in the last week:\n\n";
    }
    foreach my $DocumentID (@DocumentIDs) {
      &FetchDocument($DocumentID);
      my $DocRevID = &FetchRevisionByDocumentAndVersion($DocumentID,$Documents{$DocumentID}{NVER});

      &RevisionMailBody($DocRevID);       # Write the body
      print $Mailer "\n","-" x 72,"\n\n";  # Write a divider
    } 
    $Mailer -> close;              # Complete the message and send it
  }
}
 
exit;
