#! /usr/bin/env perl
#
# Author Eric Vaandering (ewv@fnal.gov)
#

# Usage: NotifyDigest -t Weekly|Daily


# Copyright 2001-2006 Eric Vaandering, Lynn Garren, Adam Bryant

#    This file is part of DocDB.

#    DocDB is free software; you can redistribute it and/or modify
#    it under the terms of version 2 of the GNU General Public License 
#    as published by the Free Software Foundation.

#    DocDB is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU General Public License for more details.

#    You should have received a copy of the GNU General Public License
#    along with DocDB; if not, write to the Free Software
#    Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA

# Refactor:
# 1. Get list of DocRevIDs modified
# 1.5 Redo so immediate -> Immediate, update calling sequence for  UsersToNotify
# 2. For each, get UsersToNotify
# 3. Put DocrevID or Document in array for each user
# 4. Unique array
# 5. Generate e-mail/user
#  


use DBI;
use Getopt::Long;

require "CGIInclude.pm";

require Mail::Mailer;
require Mail::Send;

require "DocDBGlobals.pm";
require "TopicSQL.pm";
require "DocumentSQL.pm";
require "RevisionSQL.pm";
require "NotificationSQL.pm";
require "MailNotification.pm";
require "Sorts.pm";

&GetOptions("t=s" => \$Set);

unless ($Set eq "Weekly" or $Set eq "Daily") {
  print "Usage: NotifyDigest -t Weekly|Daily\n";
  exit;
}  

my $Table = "EmailTopic$Set";
my $Days;
if ($Set eq "Weekly") {
  $Days  = 7;
} elsif ($Set eq "Daily") {
  $Days = 1;
}

$dbh   = DBI->connect('DBI:mysql:'.$db_name.':'.$db_host,$db_rouser,$db_ropass);

&GetTopics;

my $EmailUserID;
my @EmailUserIDs;

# Find every individual who has a notification set for this time period

my $EmailIDQuery = $dbh -> prepare("select DISTINCT(EmailUserID) from $Table");
$EmailIDQuery -> execute();
$EmailIDQuery -> bind_columns(undef,\($EmailUserID));
while ($EmailIDQuery -> fetch) {
  push @EmailUserIDs,$EmailUserID;
}

# Get the complete list of modified document revisions

my @AllDocRevIDs    = ();
my $RevisionList = $dbh -> prepare("select DocRevID from DocumentRevision where TO_DAYS(NOW())-TO_DAYS(Timestamp)<=?"); 
$RevisionList -> execute($Days);
$RevisionList -> bind_columns(undef, \($DocRevID));
while ($RevisionList -> fetch) {
  push @AllDocRevIDs,$DocRevID;

# Get the topics for each modified revision
  my @MinorRevTopics = &GetRevisionTopics($DocRevID);
  my %MajorRevTopics = ();
  foreach $MinorRevTopic (@MinorRevTopics) {
    $MajorRevTopics{$MinorTopics{$MinorRevTopicID}{MAJOR}} = 1;
  } 
  $AllMinorTopics{$DocRevID} = [@MinorRevTopics];
  $AllMajorTopics{$DocRevID} = [keys %MajorRevTopics];
}

#print "Modified Revisions: ",join ' ',@AllDocRevIDs,"\n";

# Build a personal E-mail for each user

foreach $EmailUserID (@EmailUserIDs) {
  &FetchEmailUser($EmailUserID);
  print "Preparing mail for $EmailUser{$EmailUserID}{Name}\n";
  unless ($EmailUser{$EmailUserID}{EmailAddress}) {next;}
  my @UserMinorTopics = ();
  my @UserMajorTopics = ();

# What Minor topics is this user interested in
  
  my $MinorID;
  my $MinorFetch   = $dbh -> prepare(
    "select MinorTopicID from $Table where MinorTopicID!=0 and EmailUserID=?");
  $MinorFetch -> execute($EmailUserID);
  $MinorFetch -> bind_columns(undef, \($MinorID));
  while ($MinorFetch -> fetch) {
    push @UserMinorTopics,$MinorID;
  }
  
# What Major topics is this user interested in
  
  my $MajorID;
  my $MajorFetch   = $dbh -> prepare(
    "select MajorTopicID from $Table where MajorTopicID!=0 and EmailUserID=?");
  $MajorFetch -> execute($EmailUserID);
  $MajorFetch -> bind_columns(undef, \($MajorID));
  while ($MajorFetch -> fetch) {
    push @UserMajorTopics,$MajorID;
  }
    
# Do they want them all
  
  my $AllFetch   = $dbh -> prepare(
    "select COUNT(EmailUserID) from $Table where MinorTopicID=0 and MajorTopicID=0 and EmailUserID=?");
  $AllFetch -> execute($EmailUserID);
  my ($NotifyAll) = $AllFetch -> fetchrow_array;

  my %SelectDocRevIDs = ();
  foreach $DocRevID (@AllDocRevIDs) {
    if ($NotifyAll) {
      $SelectDocRevIDs{$DocRevID} = 1; # They want them all
      next;
    }
    foreach my $RevMinorTopic (@{$AllMinorTopics{$DocRevID}}) {
      foreach my $UserMinorTopic (@UserMinorTopics) {
        if ($RevMinorTopic == $UserMinorTopic) {
          $SelectDocRevIDs{$DocRevID} = 1; # They want this minor topic
        }
      }    
    }
    foreach my $RevMajorTopic (@{$AllMajorTopics{$DocRevID}}) {
      foreach my $UserMajorTopic (@UserMajorTopics) {
        if ($RevMajorTopic == $UserMajorTopic) {
          $SelectDocRevIDs{$DocRevID} = 1; # They want this major topic
        }
      }    
    }
  }

  my @SelectDocRevIDs = keys %SelectDocRevIDs;

# We now have all the DocRevIDs, convert to Documents  

  my %DocumentIDs     = ();
  my $DocumentList = $dbh -> prepare(
   "select DocumentID from DocumentRevision where DocRevID=?"); 
  foreach my $DocRevID (@SelectDocRevIDs) {
    $DocumentList -> execute($DocRevID); 
    ($DocumentID) = $DocumentList -> fetchrow_array;
    $DocumentIDs{$DocumentID} = 1; # Hash removes duplicates
  }
  
  my @DocumentIDs = sort numerically keys %DocumentIDs;
  if (@DocumentIDs) {
    print "$EmailUser{$EmailUserID}{Name} will receive e-mail for documents ",join ' ',@DocumentIDs,"\n";

# Write the mail
  
    $Mailer = new Mail::Mailer 'smtp', Server => $MailServer;
#    $Mailer = new Mail::Mailer 'test', Server => $MailServer;

    $Headers{To} = $EmailUser{$EmailUserID}{EmailAddress};
    $Headers{From} = "$Project Document Database <$DBWebMasterEmail>";
    $Headers{Subject} = "$Set changes to $Project DocDB";
    $Mailer -> open(\%Headers);    # Start mail with headers
    print $Mailer "The following documents were changed in the $Project Document Database ";
    if ($Set eq "Daily") {
      print $Mailer "yesterday:\n\n";
    } elsif ($Set eq "Weekly") {
      print $Mailer "in the last week:\n\n";
    }
    foreach my $DocumentID (@DocumentIDs) {
      FetchDocument($DocumentID);
      my $DocRevID = FetchRevisionByDocumentAndVersion($DocumentID,$Documents{$DocumentID}{NVersions});

      RevisionMailBody($DocRevID);         # Write the body
      print $Mailer "\n","-" x 72,"\n\n";  # Write a divider
    } 
    $Mailer -> close;                      # Complete the message and send it
  }
}
 
exit;
