#! /usr/bin/env perl
#
#        Name: DocTypeAdminister.pm
# Description: This script is called by AdministerForm and does administration 
#              on document types in the DB. This script adds, modifies and
#              deletes document types.
#
#      Author: Eric Vaandering (ewv@fnal.gov)
#    Modified: 

# Copyright 2001-2005 Eric Vaandering, Lynn Garren, Adam Bryant

#    This file is part of DocDB.

#    DocDB is free software; you can redistribute it and/or modify
#    it under the terms of version 2 of the GNU General Public License 
#    as published by the Free Software Foundation.

#    DocDB is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU General Public License for more details.

#    You should have received a copy of the GNU General Public License
#    along with DocDB; if not, write to the Free Software
#    Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA

use CGI;
use DBI;

require "DocDBGlobals.pm";
require "ResponseElements.pm";
require "Security.pm";
require "HTMLUtilities.pm";
require "MiscSQL.pm";
require "DocTypeHTML.pm";
require "Messages.pm";

$query = new CGI;  # Global for subroutines

%params = $query -> Vars;

@ErrorStack = ();
@WarnStack  = ();

# Parameters to script 

$Password  = $params{password};
my $Username      = $params{admuser};
$Action    = $params{admaction};

$DocTypeID = $params{doctype};
$ShortName = $params{name};
$LongName  = $params{longdesc};

$dbh   = DBI->connect('DBI:mysql:'.$db_name.':'.$db_host,$Username,$Password);

unless ($dbh) {
  push @ErrorStack,$Msg_AdminNoConnect;
}         
&EndPage(@ErrorStack);

print $query->header;
&DocDBHeader("Modified List of Document Types");

unless (&CanAdminister) {
  push @ErrorStack,$Msg_AdminNoLogin;
}  
&EndPage(@ErrorStack);

&GetDocTypes;

if      ($Action eq "Delete") { # Delete institutions
  if (!$DocTypeID) {
    push @ErrorStack,$Msg_ModDocTypeEmpty;
  } else {
    my $DocTypeDelete = $dbh -> prepare("delete from DocumentType where DocTypeID=?");
    $DocTypeDelete -> execute($DocTypeID);
    print "<b>$DocumentTypes{$DocTypeID}{SHORT} has been deleted.</b><br>\n";
  }
} elsif ($Action eq "Modify") { # Modify journals
  if (!$DocTypeID) {
    push @ErrorStack,$Msg_ModDocTypeEmpty;
  }
  &EndPage(@ErrorStack);

# Deal with name changes     

  if ($ShortName) { 
    print "<b>Updating short document type description.</b><br>\n";
    my $DocTypeUpdate = $dbh->prepare(
       "update DocumentType set ShortType=? where DocTypeID=?");
    $DocTypeUpdate -> execute($ShortName,$DocTypeID);
  }
  if ($LongName) { 
    print "<b>Updating long document type description.</b><br>\n";
    my $DocTypeUpdate = $dbh->prepare(
       "update DocumentType set LongType=? where DocTypeID=?");
    $DocTypeUpdate -> execute($LongName,$DocTypeID);
  }
} elsif ($Action eq "New") { # Create new journals
  print "<b>Adding a new document type.</b><br>\n";
  my $DocTypeInsert = $dbh->prepare(
   "insert into DocumentType (DocTypeID,ShortType,LongType) ".
   "                  values (0,?,?)");

  $DocTypeInsert -> execute($ShortName,$LongName);
  $DocTypeID = $DocTypeInsert -> {mysql_insertid}; # Works with MySQL only
} else {
  push @ErrorStack,"No valid action was specified.";
}  

# For modify or new fetch institution information and display.

if ($Action eq "Modify" || $Action eq "New") {
  &GetDocTypes;
  print "<p><b>Here are the results of your modification:  <br>\n";
  print "Short Description: $DocumentTypes{$DocTypeID}{SHORT} <br>\n";
  print "Long Description:  $DocumentTypes{$DocTypeID}{LONG}  <br>\n";
  print "</b><p>\n";
}  

print "<p>\n";

&WarnPage(@WarnStack);
&EndPage(@ErrorStack);

&DocDBNavBar;
&DocDBFooter($DBWebMasterEmail,$DBWebMasterName);
 
exit;
