#! /usr/bin/env perl
#
# Author Eric Vaandering (ewv@fnal.gov)
#

# Copyright 2001-2007 Eric Vaandering, Lynn Garren, Adam Bryant

#    This file is part of DocDB.

#    DocDB is free software; you can redistribute it and/or modify
#    it under the terms of version 2 of the GNU General Public License 
#    as published by the Free Software Foundation.

#    DocDB is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU General Public License for more details.

#    You should have received a copy of the GNU General Public License
#    along with DocDB; if not, write to the Free Software
#    Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA

use CGI qw(-nosticky);                                                                                      
use DBI;
use XML::Twig;

require "DocDBGlobals.pm";
require "HTMLUtilities.pm";
require "ResponseElements.pm";
require "DBUtilities.pm";
require "DocumentUtilities.pm";
#require "FileHTML.pm";

my $Twig = XML::Twig -> new();
$query = new CGI;  # Global for subroutines
my %CGIParams = $query -> Vars;
CreateConnection(-type => "rw");

my $XMLText = $query -> param("XMLFile");;
my $OutFormat  = $CGIParams{outformat};
unless ($OutFormat) {
  if ($XMLText) {
    $OutFormat = "XML";
  } else {
    $OutFormat = "HTML";
  }
}    
$OutFormat =~ tr/[a-z]/[A-Z]/;

if ($XMLText) {

  $Twig -> safe_parse($XMLText);

  $XML = $Twig -> root();

  # Get control block

  my $Control = $XML     -> first_child("control");
  my $Mode    = $Control -> first_child("mode");
  my $UseDate = $Control -> first_child("usedate");

  # Get Authentication if needed

  my $Authentication =  $XML -> first_child("authentication");
  my ($User,$Password);
   
  if ($Authentication) {
    $User     = $Authentication -> first_child("username");
    $Password = $Authentication -> first_child("password");
  }
  
  my $Document = $XML -> first_child("document");

  my $DocID     = $Document -> {'att'} -> {'id'};
  my $Revision  = $Document -> first_child();

  # Extract text information from XML

  my $Title    = $Revision -> first_child("title")           -> text();
  my $Abstract = $Revision -> first_child("abstract")        -> text();
  my $PubInfo  = $Revision -> first_child("publicationinfo") -> text();
  
  # Notes


  # Extract keywords from XML
   
  my @Keywords = $Revision -> children("keyword");
  my @KeywordsText = ();
  foreach $Keyword (@Keywords) {
    push @KeywordsText,$Keyword -> text();
  }
  my $Keywords = join ' ',@KeywordsText;

  # Extract Document Type

  my $DocType   = $Revision -> first_child("doctype");
  my $DocTypeID = $DocType  -> {'att'} -> {'id'};

  # Extract submitter and author list from XML

  my $SubmitterID;

  my $Submitter = $Revision -> children("submitter");
  my $SubmitterID = $Submitter ->  {'att'} -> {'id'};
  unless ($SubmitterID) {
      #extract name and lookup 
  }  

  my @AuthorIDs = ();
  my @Authors = $Revision -> children("author");
  foreach $Author (@Authors) {
    my $AuthorID = $Author -> {'att'} -> {'id'};
    if ($AuthorID) {
      push @AuthorIDs, $AuthorID;
    } else {
      #extract name and lookup
    }  
  }

  # Extract topic list from XML

  my @TopicIDs = ();
  my @Topics = $Revision -> children("topic");
  foreach $Topic (@Topics) {
    my $TopicID = $Topic -> {'att'} -> {'id'};
    if ($TopicID) {
      push @TopicIDs, $TopicID;
    } else {
      #extract name and lookup
      #bail if more than one match
    }  
  }

  # Similar loops for view and modify, Event IDs

  my ($NewDocumentID,$NewDocRevID) 
            = AddDocument(-version     => $Mode,         -title       => $Title,
                          -abstract    => $Abstract,     -keywords    => $Keywords,
                          -pubinfo     => $PubInfo,
                          -typeid      => $DocTypeID,    -requesterid => @AuthorHints[0], 
                          -authorids   => \@AuthorIDs,   -topicids    => \@TopicIDs, 
                          -eventids    => \@EventIDs,    -viewids     => \@ViewGroupIDs, 
                          -modifyids   => \@ModifyGroupIDs);
}

if ($OutFormat eq 'XML') {
  require "XMLOutput.pm";
  unless ($NoXMLHead) {
    print XMLHeader();
  }  
  NewXMLOutput();
} else {
  print $query -> header( -charset => $HTTP_ENCODING );
  DocDBHeader($PageTitle,"$Project Document $DocumentID-v$Version",-scripts => ["PopUps"]);
  print $query -> start_multipart_form('POST',$XMLUpload,'id="xmlupload" name="xmlupload"');
  print $query -> filefield(-name      => 'XMLFile', -size => 60,
                            -maxlength => 250);
  print $query -> submit (-value => "Upload XML Description");
  print $query -> end_multipart_form;
}

if ($OutFormat eq 'HTML') {
  DocDBNavBar();
  DocDBFooter($DBWebMasterEmail,$DBWebMasterName);
} elsif ($OutFormat eq 'XML') {
  print GetXMLOutput();
}
