#! /usr/bin/env perl
#
# Description: Change preferences for what/when to be notified of document
#              changes in e-mail.
#
#      Author: Eric Vaandering (ewv@fnal.gov)
#    Modified: 
#

# Copyright 2001-2006 Eric Vaandering, Lynn Garren, Adam Bryant

#    This file is part of DocDB.

#    DocDB is free software; you can redistribute it and/or modify
#    it under the terms of version 2 of the GNU General Public License 
#    as published by the Free Software Foundation.

#    DocDB is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU General Public License for more details.

#    You should have received a copy of the GNU General Public License
#    along with DocDB; if not, write to the Free Software
#    Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA

use CGI qw(-nosticky);    
use DBI;
                                                  
require "DocDBGlobals.pm";
require "ResponseElements.pm";
require "EmailSecurity.pm";
require "MailNotification.pm";
require "Scripts.pm";
require "Sorts.pm";
require "SearchFormElements.pm";

require "HTMLUtilities.pm";
require "DocumentUtilities.pm";

require "AuthorSQL.pm";
require "NotificationSQL.pm";
require "SecuritySQL.pm";
require "TopicSQL.pm";

require "DocumentHTML.pm";
require "MeetingHTML.pm";

$query = new CGI;  # Global for subroutines
$dbh   = DBI->connect('DBI:mysql:'.$db_name.':'.$db_host,$db_rwuser,$db_rwpass);

GetTopics();
GetAuthors();

%params = $query -> Vars;

# Collect parameters

my $Mode         = $params{mode};
my $UserName     = $params{username};
my $Password     = $params{password};
my $NewPass      = $params{newpass};
my $ConfNewPass  = $params{confnewpass};
   $Digest       = $params{digest};
my $ClearWatched = $params{clearwatched};

my @ImmediateEventGroupIDs = split /\0/,$params{immediate_eventgroups};
my @DailyEventGroupIDs     = split /\0/,$params{daily_eventgroups};
my @WeeklyEventGroupIDs    = split /\0/,$params{weekly_eventgroups};
my @ImmediateEventIDs      = split /\0/,$params{immediate_events};
my @DailyEventIDs          = split /\0/,$params{daily_events};
my @WeeklyEventIDs         = split /\0/,$params{weekly_events};

$UserName =~ s/\s+//g;
$Password =~ s/\s+//g;

if (($NewPass || $ConfNewPass) && ($NewPass ne $ConfNewPass)) {
  push @WarnStack,"The passwords you entered did not match. Password not
  changed.";
}

if ($Mode eq "newuser") {
  my $PassConf = $params{passconf};
  $PassConf =~ s/\s+//g;

# Do the passwords match, is there a password

  if ($Password eq "") {
    push @ErrorStack,"You may not supply an empty password. Please try again.";
  }
  if ($Password ne $PassConf) {
    push @ErrorStack,"The passwords you entered did not match. Please try again.";
  }

# Does the username already exist?

  my $UserFetch =  $dbh->prepare("select COUNT(EmailUserID) from EmailUser where Username=?");
     $UserFetch -> execute($UserName);
  my ($UserExists) = $UserFetch -> fetchrow_array;

  if ($UserExists) {
    push @ErrorStack,"The username you entered already exists. Please try again.";
  }
}

# Start the page
   
print $query->header;
DocDBHeader("Update Notification Preferences","",-scripts => ["PopUps"]); # Prob need specialized header

# Create new user if called for

if ($Mode eq "newuser") {
  if (@ErrorStack) { # There's a problem, so let them try again
    ErrorPage(@ErrorStack);
    NewEmailUserForm();
    print "<p/>\n";
    LoginEmailUserForm();
    print "<p/>\n";
    EndPage();
  } else { # Everything OK, lets create the user
    srand (time ^ $$ ^ unpack "%32L*", `ps axww`);

    my $Salt = ((0..9,'a'..'z','A'..'Z','.','/')[(int rand (64))]).
               ((0..9,'a'..'z','A'..'Z','.','/')[(int rand (64))]);

# Insert the user and verify them

    my $EncryptedPassword = crypt($Password,$Salt);
    my $UserInsert        = $dbh -> prepare(
       "insert into EmailUser (EmailUserID,Username,Password,Verified) ".
       "values                (0,          ?,       ?,       1)");
       $UserInsert -> execute($UserName,$EncryptedPassword);

# Make the user part of the group who's httpd password they've used.

    my $EmailUserID =  $UserInsert -> {mysql_insertid}; # Works with MySQL only
    my $GroupID = FetchSecurityGroupByName($remote_user); 
    my $EmailUserInsert = $dbh -> prepare("insert into UsersGroup (UsersGroupID,EmailUserID,GroupID) values (0,?,?)"); 
       $EmailUserInsert -> execute($EmailUserID,$GroupID);

    print "User <b>$UserName</b> created as a member of <b>$remote_user</b> group. 
           Do not forget your password, there is no way to retrieve it.<p\>\n"; 
    $Mode = "update"; # Now display the form to update  
  }
}

# Check on progress

EndPage();

# Check for valid user

if ($Password) { 
  $EmailUserID = ValidateEmailUser($UserName,$Password);
} elsif ($Digest) {
  $EmailUserID = ValidateEmailUserDigest($UserName,$Digest);
} elsif ($UserValidation eq "certificate") {
  require "CertificateUtilities.pm";
  $EmailUserID = FetchEmailUserIDByCert();
}    

if ($EmailUserID) {
  FetchEmailUser($EmailUserID);
  $Digest = EmailUserDigest($EmailUserID);
} else {
  push @ErrorStack,"The username/password pair or certificate you supplied is invalid. Please try again or contact an administrator.";
  ErrorPage();
  LoginEmailUserForm();
  print "<p/>\n";
  NewEmailUserForm();
  print "<p/>\n";
  EndPage();
}

EndPage();

# Everything is OK, display the page

if ($Mode eq "update") {

# Collect relevant parameters for user preferences
  my $Name     = $params{name};
  my $Email    = $params{email};
  my $HTML     = $params{html};

# Update DB

  if ($UserValidation eq "certificate") {
    my $UpdateUserInfo = $dbh -> prepare("update EmailUser set EmailAddress=?,PreferHTML=? where EmailUserID=?");
    $UpdateUserInfo -> execute($Email,$HTML,$EmailUserID);
  } else {
    my $UpdateUserInfo = $dbh -> prepare("update EmailUser set Name=?,EmailAddress=?,PreferHTML=? where EmailUserID=?");
    $UpdateUserInfo -> execute($Name,$Email,$HTML,$EmailUserID);
  } 

  if ($NewPass && $ConfNewPass && ($NewPass eq $ConfNewPass) 
               && ($UserValidation ne "certificate")) {
    srand (time ^ $$ ^ unpack "%32L*", `ps axww`);

    my $Salt = ((0..9,'a'..'z','A'..'Z','.','/')[(int rand (64))]).
               ((0..9,'a'..'z','A'..'Z','.','/')[(int rand (64))]);

    my $EncryptedPassword = crypt($NewPass,$Salt);
    my $UpdatePassword = $dbh -> prepare("update EmailUser set Password=? where EmailUserID=?");
       $UpdatePassword -> execute($EncryptedPassword,$EmailUserID);
    push @WarnStack,"Your password has been changed.";
  }  

  WarnPage();

# Clear and refetch user

  $EmailUser{$EmailUserID}{EmailUserID} = 0; 
  FetchEmailUser($EmailUserID);

# Delete individual documents if asked
    
  if ($ClearWatched && $EmailUserID) {
    my $Delete = $dbh -> prepare("delete from EmailDocumentImmediate where EmailUserID=?"); 
    $Delete -> execute($EmailUserID);
  }      
    
# Delete old and Insert new notifications

  SetTopicNotifications($EmailUserID,"Immediate");  
  SetTopicNotifications($EmailUserID,"Daily");  
  SetTopicNotifications($EmailUserID,"Weekly");  

  SetAuthorNotifications($EmailUserID,"Immediate");  
  SetAuthorNotifications($EmailUserID,"Daily");  
  SetAuthorNotifications($EmailUserID,"Weekly");  

  SetKeywordNotifications($EmailUserID,"Immediate");  
  SetKeywordNotifications($EmailUserID,"Daily");  
  SetKeywordNotifications($EmailUserID,"Weekly");  

# FIXME: Move all notifications here, including document specific ones

  DeleteNotifications( {-emailuserid => $EmailUserID} );

# Events

  InsertNotifications({ -emailuserid => $EmailUserID,        -type   => "Event", 
                                -ids => \@ImmediateEventIDs, -period => "Immediate", });
  InsertNotifications({ -emailuserid => $EmailUserID,        -type   => "Event", 
                                -ids => \@DailyEventIDs,     -period => "Daily", });
  InsertNotifications({ -emailuserid => $EmailUserID,        -type   => "Event", 
                                -ids => \@WeeklyEventIDs,    -period => "Weekly", });
        
# EventGroups        
                                
  InsertNotifications({ -emailuserid => $EmailUserID,             -type   => "EventGroup", 
                                -ids => \@ImmediateEventGroupIDs, -period => "Immediate", });
  InsertNotifications({ -emailuserid => $EmailUserID,             -type   => "EventGroup", 
                                -ids => \@DailyEventGroupIDs,     -period => "Daily", });
  InsertNotifications({ -emailuserid => $EmailUserID,             -type   => "EventGroup", 
                                -ids => \@WeeklyEventGroupIDs,    -period => "Weekly", });
}  

# Clear (are refetched in DisplayNotification)

ClearNotifications();

print $query -> startform('POST',$SelectEmailPrefs);
print "<div id=\"SelectEmailPrefsForm\">\n";
print $query -> hidden(-name => 'mode', -default => "update", -override => 1);

print "<table class=\"HighPaddedTable CenteredTable\"><tr><td>\n";

print "<p><b>Use this page to change your personal account settings.</b></p> 
       <p> At the top part of the page, you can change
       your e-mail address, name, and whether you prefer text or HTML e-mail.
       (At the present time, all e-mail is text only, but your choice will be
       remembered for future enhancements.)
       Also shown are which group(s) you are a member of. If this list is incorrect,
       <a href=\"mailto:$DBWebMasterEmail\">contact the administrators</a> and ask them 
       to change your group membership.</p>\n";
unless ($UserValidation eq "certificate") {
  print "<p>If you want to change your password, type the new password in both boxes.</p>\n"; 
}
print "<p>At the bottom part of the page, select the <a href=\"#topic\">topics 
       or  subtopics</a>,  <a href=\"#author\">authors</a>, 
       <a href=\"#event\">events</a>, or  <a href=\"#keyword\">keywords</a> you
       want to be notified of changes to, either immediately or in digests sent
       every day or week.</p>\n";
print "</td></tr></table>\n";

print "<table class=\"HighPaddedTable\">\n";
print "<tr><td colspan=\"2\">\n";
UserPrefForm($EmailUserID);
print "</td><td>";
print "<b>Current e-mail notifications:</b>\n";
print "<ul>\n";
print "<li>\n";
DisplayNotification($EmailUserID,"Immediate",true);
print "</li>\n";
print "<li>\n";
DisplayNotification($EmailUserID,"Daily",true);
print "</li>\n";
print "<li>\n";
DisplayNotification($EmailUserID,"Weekly",true);
print "</li>\n";
print "</ul>\n";
print "</td></tr></table>\n";

# FIXME: No way to delete notification on a single document

my @WatchDocumentIDs = FetchEmailDocuments(-emailuserid => $EmailUserID);
if (@WatchDocumentIDs) {
  print "<h4>You are watching these individual documents: \n";
  print $query -> checkbox(-name => "clearwatched", -value => 1, -label => 'Clear Watched Documents');
  print "</h4>\n";
}
my %FieldList = PrepareFieldList(-default => "Default");
my $NDocs = DocumentTable(-fieldlist => \%FieldList, -docids => \@WatchDocumentIDs);  

print "<hr/><table class=\"CenteredTable\">\n";
print "<tr><td>";
print $query -> submit (-value => "Update Notification Preferences");
print " \n";
print $query -> reset (-value => "Reset");
print "</td></tr></table>\n";

print "<a name=\"topic\"/><h3>Notification by Topics</h3>\n";

print "<table class=\"HighPaddedTable\">\n";
print "<tr>";
EmailTopicForm($EmailUserID,"Immediate");
print "</tr><tr>\n";
EmailTopicForm($EmailUserID,"Daily");
print "</tr><tr>\n";
EmailTopicForm($EmailUserID,"Weekly");
print "</tr>\n";
print "</table>\n";

print "<hr/><a name=\"author\"/><h3>Notification by Authors</h3>\n";
print "<table class=\"HighPaddedTable\"><tr>\n";
EmailAuthorForm($EmailUserID,"Immediate");
EmailAuthorForm($EmailUserID,"Daily");
EmailAuthorForm($EmailUserID,"Weekly");
print "</tr></table>\n";

print "<hr/><a name=\"event\"/><h3>Notification by Events</h3>\n";
print "<table class=\"HighPaddedTable\"><tr>\n";\
print "<td>",FormElementTitle(-helptext => "Immediate", -helplink => "notifyevent"),"</td>";
print "<td>";
EventGroupSelect({ -multiple => $TRUE, -name    => "immediate_eventgroups", 
                   -helplink => "",    -default => $Notifications{$EmailUserID}{EventGroup_Immediate}  });
print "</td><td>";
EventSelect({      -multiple => $TRUE, -name    => "immediate_events",      
                   -helplink => "",    -default => $Notifications{$EmailUserID}{Event_Immediate} });
print "</td>";
print "</tr><tr>";
print "<td>",FormElementTitle(-helptext => "Daily", -helplink => "notifyevent"),"</td>";
print "<td>";
EventGroupSelect({ -multiple => $TRUE, -name => "daily_eventgroups", 
                   -helplink => "",    -default => $Notifications{$EmailUserID}{EventGroup_Daily} });
print "</td><td>";
EventSelect({      -multiple => $TRUE, -name => "daily_events",      
                   -helplink => "",    -default => $Notifications{$EmailUserID}{Event_Daily} });
print "</td>";
print "</tr><tr>";
print "<td>",FormElementTitle(-helptext => "Weekly", -helplink => "notifyevent"),"</td>";
print "<td>";
EventGroupSelect({ -multiple => $TRUE, -name => "weekly_eventgroups", 
                   -helplink => "",    -default => $Notifications{$EmailUserID}{EventGroup_Weekly} });
print "</td><td>";
EventSelect({      -multiple => $TRUE, -name => "weekly_events",      
                   -helplink => "",    -default => $Notifications{$EmailUserID}{Event_Weekly} });
print "</td>";
print "</tr></table>\n";


print "<hr/><a name=\"keyword\"/><h3>Notification by Keywords</h3>\n";
print "<table class=\"HighPaddedTable\">\n";
EmailKeywordForm($EmailUserID,"Immediate");
EmailKeywordForm($EmailUserID,"Daily");
EmailKeywordForm($EmailUserID,"Weekly");
print "</table>\n";

print "<table class=\"HighPaddedTable CenteredTable\">\n";
print "<tr><td>";
print $query -> submit (-value => "Update Notification Preferences");
print " \n";
print $query -> reset (-value => "Reset");
print "</td></tr></table></div>\n";
print $query -> endform;
print "<hr/>\n";

DocDBNavBar();
DocDBFooter($DBWebMasterEmail,$DBWebMasterName);

