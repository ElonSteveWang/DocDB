#! /usr/bin/env perl
#
# Author Eric Vaandering (ewv@fnal.gov)
#
#
#  Three modes of presenting information:
#    1) mode=date (default, sorted by reverse date, modification date given)
#    2) mode=meeting (sorted by author, files are listed)
#    3) mode=conference (sorted by reverse date, conference fields shown)

# Copyright 2001-2004 Eric Vaandering, Lynn Garren, Adam Bryant

#    This file is part of DocDB.

#    DocDB is free software; you can redistribute it and/or modify
#    it under the terms of version 2 of the GNU General Public License 
#    as published by the Free Software Foundation.

#    DocDB is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU General Public License for more details.

#    You should have received a copy of the GNU General Public License
#    along with DocDB; if not, write to the Free Software
#    Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA

use Benchmark;
use CGI;
use DBI;

$StartTime = new Benchmark;

require "DocDBGlobals.pm";
require "ResponseElements.pm";
require "TopicSQL.pm";
require "SecuritySQL.pm";
require "DocumentSQL.pm";
require "RevisionSQL.pm";
require "MiscSQL.pm";
require "FSUtilities.pm";
require "WebUtilities.pm";
require "HTMLUtilities.pm";
require "Security.pm";
require "SearchAtoms.pm";
require "Sorts.pm";

$query = new CGI;  # Global for subroutines
$dbh   = DBI->connect('DBI:mysql:'.$db_name.':'.$db_host,$db_rouser,$db_ropass);

&GetTopics;         
&GetSecurityGroups; 

### Set up, give user initial information

%params = $query -> Vars;

print $query->header;
&DocDBHeader("$Project Document Search Results","Search Results");

### Pull info out of params into local variables

$InnerLogic  = $params{innerlogic} || "OR";
$OuterLogic  = $params{outerlogic} || "AND";

$TitleSearch            = $params{titlesearch};
$TitleSearchMode        = $params{titlesearchmode};
$AbstractSearch         = $params{abstractsearch};
$AbstractSearchMode     = $params{abstractsearchmode};
$KeywordSearch          = $params{keywordsearch};
$KeywordSearchMode      = $params{keywordsearchmode};
$RevisionNoteSearch     = $params{revisionnotesearch};
$RevisionNoteSearchMode = $params{revisionnotesearchmode};
$PubInfoSearch          = $params{pubinfosearch};
$PubInfoSearchMode      = $params{pubinfosearchmode};
$FileSearch             = $params{filesearch};
$FileSearchMode         = $params{filesearchmode};
$FileDescSearch         = $params{filedescsearch};
$FileDescSearchMode     = $params{filedescsearchmode};
$FileContSearch         = $params{filecontsearch};
$FileContSearchMode     = $params{filecontsearchmode};

@RequesterSearchIDs = split /\0/,$params{requestersearch};
@AuthorSearchIDs    = split /\0/,$params{authors};
@TypeSearchIDs      = split /\0/,$params{doctypemulti};

@MinorSearchIDs = split /\0/,$params{minortopic};
@MajorSearchIDs = split /\0/,$params{majortopic};

$Afterday   = $params{afterday};
$Aftermonth = $params{aftermonth};
$Afteryear  = $params{afteryear};
if ($Afteryear && $Afteryear ne "----") { 
  if ($Aftermonth eq "---") {$Aftermonth = "Jan";}
  if ($Afterday   eq "--")  {$Afterday   = "1";}
  $SQLBegin   = "$Afteryear-$ReverseAbrvMonth{$Aftermonth}-$Afterday";
}

$Beforeday   = $params{beforeday};
$Beforemonth = $params{beforemonth};
$Beforeyear  = $params{beforeyear};
if ($Beforeyear && $Beforeyear ne "----") { 
  if ($Beforemonth eq "---") {$Beforemonth = "Dec";}
  if ($Beforeday   eq "--")  {$Beforeday   = &DaysInMonth($ReverseAbrvMonth{$Beforemonth},$Beforeyear);}
  $SQLEnd     = "$Beforeyear-$ReverseAbrvMonth{$Beforemonth}-$Beforeday";
}

my $Mode    = $params{mode};
unless ($Mode eq "date" or $Mode eq "meeting" or $Mode eq "conference") {
  $Mode = "date";
}  

### Check parameters for errors

@ErrorStack = ();
@WarnStack  = ();

my @DocumentIDs = ();
my @RevisionDocumentIDs = ();
my @TopicDocumentIDs = ();
my @ContentDocumentIDs = ();

my ($SearchedRevisions,$SearchedTopics,$SearchedAuthors,$SearchedFiles,$SearchedTypes,$SearchedContent);

unless ($InnerLogic eq "AND" || $InnerLogic eq "OR") {
  push @ErrorStack,"Inner logic must be either AND or OR.";
}   
unless ($OuterLogic eq "AND" || $OuterLogic eq "OR") {
  push @ErrorStack,"Outer logic must be either AND or OR.";
}   

if ((@ErrorStack)) {  # The user made one or more mistakes, warn and exit
  &EndPage(@ErrorStack);
}

print "<p>\n";

if ($TitleSearch || $AbstractSearch || $KeywordSearch || $RevisionNoteSearch || 
    $PubInfoSearch || @RequesterSearchIDs || $SQLBegin    || $SQLEnd) {
  $SearchedRevisions = 1;
### Text search matches
  my $TitlePhrase        = &TextSearch("DocumentTitle",  $TitleSearchMode,        $TitleSearch);
  my $AbstractPhrase     = &TextSearch("Abstract",       $AbstractSearchMode,     $AbstractSearch);
  my $KeywordPhrase      = &TextSearch("Keywords",       $KeywordSearchMode,      $KeywordSearch);
  my $RevisionNotePhrase = &TextSearch("Note",           $RevisionNoteSearchMode, $RevisionNoteSearch);
  my $PubInfoPhrase      = &TextSearch("PublicationInfo",$PubInfoSearchMode,      $PubInfoSearch);

### Other matches

  my $RequesterPhrase = &IDSearch("DocumentRevision","SubmitterID","OR",@RequesterSearchIDs);

  my $EndDatePhrase;
  my $StartDatePhrase;
  if ($SQLEnd) {
    $EndDatePhrase   = " RevisionDate<\"$SQLEnd\" ";
  }
  if ($SQLBegin) {
    $StartDatePhrase = " RevisionDate>\"$SQLBegin\" ";
  }
  
### Get Documents from DocumentRevision that match

  my @RevisionPhrases = ();
  my $RevisionQuery   = "select DocumentID from DocumentRevision where Obsolete=0 and ";

  if ($TitlePhrase       ) {push @RevisionPhrases,$TitlePhrase       ;}
  if ($AbstractPhrase    ) {push @RevisionPhrases,$AbstractPhrase    ;}
  if ($KeywordPhrase     ) {push @RevisionPhrases,$KeywordPhrase     ;}
  if ($RevisionNotePhrase) {push @RevisionPhrases,$RevisionNotePhrase;}
  if ($PubInfoPhrase     ) {push @RevisionPhrases,$PubInfoPhrase     ;}
  if ($RequesterPhrase   ) {push @RevisionPhrases,$RequesterPhrase   ;}
  if ($EndDatePhrase     ) {push @RevisionPhrases,$EndDatePhrase     ;}
  if ($StartDatePhrase   ) {push @RevisionPhrases,$StartDatePhrase   ;}

  $RevisionQuery .= join $OuterLogic,@RevisionPhrases;

  my %RevisionDocumentIDs = ();

  my $document_list = $dbh -> prepare($RevisionQuery);
     $document_list -> execute();
     $document_list -> bind_columns(undef, \($DocumentID));

### List of documents found at this stage

  while ($document_list -> fetch) {
    $RevisionDocumentIDs{$DocumentID} = 1; # Hash removes duplicates
  }
  @RevisionDocumentIDs = keys %RevisionDocumentIDs;
} 

### Topics (if any)

if (@MinorSearchIDs && @MajorSearchIDs) { # Remove major topic if one 
  my %MajorSearchIDs = ();                # minor topics is selected
  foreach $MajorSearchID (@MajorSearchIDs) {
    $MajorSearchIDs{$MajorSearchID} = 1;
  } 
  foreach $MinorSearchID (@MinorSearchIDs) {
    $MajorSearchIDs{$MinorTopics{$MinorSearchID}{MAJOR}} = 0;
  } 
  @MajorSearchIDs = ();
  foreach $MajorSearchID (keys %MajorSearchIDs) {
    if ($MajorSearchIDs{$MajorSearchID} == 1) {
      push @MajorSearchIDs, $MajorSearchID;
    }
  } 
}

if (@MinorSearchIDs) { 
  $SearchedMinor = 1;
  @MinorRevisions = &TopicSearch($InnerLogic,"minor",@MinorSearchIDs);
  @MinorDocumentIDs = &ValidateRevisions(@MinorRevisions);
} 

if (@MajorSearchIDs)  {
  $SearchedMajor = 1;
  @MajorRevisions = &TopicSearch($InnerLogic,"major",@MajorSearchIDs);
  @MajorDocumentIDs = &ValidateRevisions(@MajorRevisions);
}  

### Authors (if any)

if (@AuthorSearchIDs) {
  $SearchedAuthors = 1;
  @AuthorRevisions = &AuthorSearch($InnerLogic,@AuthorSearchIDs);
  @AuthorDocumentIDs = &ValidateRevisions(@AuthorRevisions);
}

### Document types (if any)

if (@TypeSearchIDs) {
  $SearchedTypes = 1;
  @TypeDocumentIDs = &TypeSearch("OR",@TypeSearchIDs);
}

### Files (if any)

if ($FileSearch || $FileDescSearch) {
  $SearchedFiles = 1;
### Text search matches
  my $FilePhrase        = &TextSearch("FileName",    $FileSearchMode,    $FileSearch);
  my $DescriptionPhrase = &TextSearch("Description", $FileDescSearchMode,$FileDescSearch);

### Get Revisions from DocumentFile that match

  my @FilePhrases = ();
  my $FileQuery   = "select DocRevID from DocumentFile where ";

  if ($FilePhrase       ) {push @FilePhrases,$FilePhrase       ;}
  if ($DescriptionPhrase) {push @FilePhrases,$DescriptionPhrase;}

  $FileQuery .= join $OuterLogic,@FilePhrases;

  my %FileDocumentIDs = ();
  my @FileRevisions = ();
  my $DocRevID;
  my $revision_list = $dbh -> prepare($FileQuery);
     $revision_list -> execute();
     $revision_list -> bind_columns(undef, \($DocRevID));

### List of revisions found at this stage

  while ($revision_list -> fetch) {
    push @FileRevisions,$DocRevID;
  }
  @FileDocumentIDs = &ValidateRevisions(@FileRevisions);
} 

if ($ContentSearch && $FileContSearch) {
  $SearchedContent = 1;
  my %ContentDocumentIDs = ();
  open SEARCH,"$ContentSearch $FileContSearchMode $FileContSearch |";
  while (my $line = <SEARCH>) {
    chomp $line;
    my $DocumentID = int($line);
    $ContentDocumentIDs{$DocumentID} = 1;
  } 
  close SEARCH; 
  @ContentDocumentIDs = keys %ContentDocumentIDs;
}  

### Fetch all info for documents that match all criteria

if ($OuterLogic eq "OR") {
  push @DocumentIDs,@RevisionDocumentIDs;
  push @DocumentIDs,@TopicDocumentIDs;
  push @DocumentIDs,@AuthorDocumentIDs;
  push @DocumentIDs,@FileDocumentIDs;
  push @DocumentIDs,@TypeDocumentIDs;
  push @DocumentIDs,@ContentDocumentIDs;
} elsif ($OuterLogic eq "AND") {
  my %TotalDocumentIDs = ();
  my $TotalSearches    = 0;
  my $DocID;
  if ($SearchedRevisions) {
    ++$TotalSearches;
    foreach $DocID (@RevisionDocumentIDs) {
      ++$TotalDocumentIDs{$DocID};
    }
  }    
  if ($SearchedMinor) {
    ++$TotalSearches;
    foreach $DocID (@MinorDocumentIDs) {
      ++$TotalDocumentIDs{$DocID};
    }
  } 
  if ($SearchedMajor) {
    ++$TotalSearches;
    foreach $DocID (@MajorDocumentIDs) {
      ++$TotalDocumentIDs{$DocID};
    }
  } 
  if ($SearchedAuthors) {
    ++$TotalSearches;
    foreach $DocID (@AuthorDocumentIDs) {
      ++$TotalDocumentIDs{$DocID};
    }
  }  
  if ($SearchedFiles) {
    ++$TotalSearches;
    foreach $DocID (@FileDocumentIDs) {
      ++$TotalDocumentIDs{$DocID};
    }
  } 
  if ($SearchedTypes) {
    ++$TotalSearches;
    foreach $DocID (@TypeDocumentIDs) {
      ++$TotalDocumentIDs{$DocID};
    }
  } 
  if ($SearchedContent) {
    ++$TotalSearches;
    foreach $DocID (@ContentDocumentIDs) {
      ++$TotalDocumentIDs{$DocID};
    }
  } 

### Which ones matched every search

  foreach $DocID (keys %TotalDocumentIDs) {
    if ($TotalDocumentIDs{$DocID} == $TotalSearches) {
      push @DocumentIDs,$DocID;
    }
  }    
}

### Get full info on matches

foreach my $DocumentID (@DocumentIDs) { 
  &FetchDocument($DocumentID);
  &FetchRevisionByDocumentAndVersion($DocumentID,$Documents{$DocumentID}{NVersions});
}

if      ($Mode eq "meeting") {
  @DocumentIDs  =        sort DocumentByRequester      @DocumentIDs;
} elsif ($Mode eq "conference") {
  @DocumentIDs = reverse sort DocumentByConferenceDate @DocumentIDs;
} else {
  @DocumentIDs = reverse sort DocumentByRevisionDate   @DocumentIDs;  
}

### Print out summary info for matching documents

print "<center><table cellpadding=3>\n";

&DocumentSummary(0,$Mode); # Force table headers

foreach $DocumentID (@DocumentIDs) {
  unless ($DocumentID) {next;}
  $Version = &LastAccess($DocumentID);
  if ($Version == -1) {next;}
  &DocumentSummary($DocumentID,$Mode,$Version);
  ++$NumDoc;
}

print "</table></center>\n";
print "<p>\n";

### Statistics

print "<p><b>Number of documents found: $NumDoc</b><p>\n";

$EndTime  = new Benchmark;

&DocDBNavBar();
&DocDBFooter($DBWebMasterEmail,$DBWebMasterName);
