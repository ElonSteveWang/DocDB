#! /usr/bin/env perl
#
#        Name: CustomListForm
# Description: Allow users, admins, and meeting organizers to change how various
#              lists of documents and agendas are displayed in DocDB 
#
#      Author: Eric Vaandering (ewv@fnal.gov)
#    Modified: 
#

# Copyright 2001-2005 Eric Vaandering, Lynn Garren, Adam Bryant

#    This file is part of DocDB.

#    DocDB is free software; you can redistribute it and/or modify
#    it under the terms of version 2 of the GNU General Public License 
#    as published by the Free Software Foundation.

#    DocDB is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU General Public License for more details.

#    You should have received a copy of the GNU General Public License
#    along with DocDB; if not, write to the Free Software
#    Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA


use CGI qw(-nosticky);
use DBI;

require "DocDBGlobals.pm";
require "AdministerElements.pm";
require "ResponseElements.pm";
require "FormElements.pm";
require "Scripts.pm";
require "Security.pm";
require "Messages.pm";
require "Sorts.pm";
require "Fields.pm";

require "DBUtilities.pm";
require "HTMLUtilities.pm";

require "MeetingSQL.pm";
require "SecuritySQL.pm";
require "ConfigSQL.pm";

require "DocumentHTML.pm";
require "TopicHTML.pm"; 
require "MeetingHTML.pm"; 

$query = new CGI;  # Global for subroutines

%params = $query -> Vars;

my $Scope             = $params{scope};
my @EventGroupIDs     = split /\0/,$params{eventgroups};
my @EventIDs          = split /\0/,$params{events};
my @Defaults          = split /\0/,$params{defaultlists}; 
my @TopicIDs          = split /\0/,$params{topics};

$Default = "Default"; # FIXME

my $MaxFields = 15;

$query -> delete_all();

CreateConnection(-type => "rw");

EndPage(-startpage => $TRUE);

GetConferences();
GetAllEventGroups();
GetSecurityGroups();

# Setup disable script correctly

my $AllowEvents = 0;
my $AllowAll    = 0;
if (CanCreate()) {
  $AllowEvents = 1;
}  
if (CanAdminister()) {
  $AllowAll = 1;
}  

### Build field list, will be used for everything later

my %FieldList = ();
foreach my $FieldCount (1..$MaxFields) {
  my $Field = $params{"field$FieldCount"};
  if ($Field && $Field ne "xxxx") {
    push @ActionStack,"Field \"$Field\" added to the display";
    $FieldList{$Field}{Row}     = $params{"row$FieldCount"};
    $FieldList{$Field}{Column}  = $params{"col$FieldCount"};
    $FieldList{$Field}{RowSpan} = $params{"rowspan$FieldCount"};
    $FieldList{$Field}{ColSpan} = $params{"colspan$FieldCount"};
  }
}

if ($Scope eq "All") { # Do inserts to DB, check user's permissions
  foreach my $Default (@Defaults) {
    if ($AllowAll) {
      InsertCustomFieldList(-default => $Default, -fieldlist => \%FieldList); 
      push @ActionStack,"Custom list set for $Default list";
    } else {
      push @WarnStack,"You are not allowed to default lists";
    }  
  }
  foreach my $TopicID (@TopicIDs) {
    if ($AllowAll) {
      InsertCustomFieldList(-topicid => $TopicID, -fieldlist => \%FieldList); 
      push @ActionStack,"Custom list set for Topic $TopicID";
    } else {
      push @WarnStack,"You are not allowed to modify topics";
    }  
  }
  foreach my $EventGroupID (@EventGroupIDs) {
    if ($AllowAll) {
      InsertCustomFieldList(-eventgroupid => $EventGroupID, -fieldlist => \%FieldList); 
      push @ActionStack,"Custom list set for Event Group $EventGroupID";
    } else {
      push @WarnStack,"You are not allowed to modify event groups";
    }  
  }
  foreach my $EventID (@EventIDs) {
    if ($AllowEvents && CanModifyMeeting($EventID)) {
      InsertCustomFieldList(-eventid => $EventID, -fieldlist => \%FieldList); 
      push @ActionStack,"Custom list set for Event $EventID";
    } else {
      push @WarnStack,"You are not allowed to modify this event";
    }  
  }
} else {
 # Set cookies, no need to check permissions
} 
 
### Start HTML   
    
print $query->header;
DocDBHeader("Customize Document Lists","",-scripts => ["PopUps","CustomListDisable"]); 

ActionReport();
EndPage();
print $query -> start_multipart_form('POST',$CustomListForm,
                                     "id=\"customlist\" name=\"customlist\"");

print q{<table class="MedPaddedTable">
        <tr>
        <td colspan="2">
        <p>This page allows you to change what information about documents is 
        displayed in various parts of DocDB. You can choose to change the information
        just for yourself (you must allow cookies in your browser) or, if  your
        access level is high enough, for everyone. As a normal user, you may only
        change the  display of events you may modify. For other changes that affect
        all users,  please contact an administrator.</p>
        <p>If you are using multiple rows, and especially if you are
        spanning columns or rows, it is easy to generate very difficult to read
        output.</p>   
        </td>
        </tr>
        <tr>
        <td colspan="2">
       };

# Scope limiter which is hooked to JS

my %Scope = ();
$Scope{All}  = "For Everyone";
$Scope{User} = "Only for me";
print FormElementTitle(-helplink => "fieldscope", -helptext => "Scope of Changes");
print $query -> radio_group(-name    => "scope", -values   => \%Scope, 
                            -default => "User",   
                            -onclick => "disabler_customlist($AllowEvents,$AllowAll);");

print "</td></tr><tr><td>";

# Predefined lists

my @FieldLists = keys %DefaultFieldLists;
print FormElementTitle(-helptext => "Predefined Lists", -helplink => "definedfieldlists");
print $query -> scrolling_list(-name     => "defaultlists", -values => \@FieldLists, 
                               -size     => 10, -multiple => $TRUE);  

print "</td><td>\n";

# Topics (which might be left off for the moment)

TopicScroll(-helptext => "Minor Topics", -helplink => "topics", -multiple => $TRUE); 
print "</td></tr>\n";
print "<tr><td>";

# Event groups and events. Put default here if they've followed the right link.

EventGroupSelect(-multiple => $TRUE);
print "</td><td>\n";
EventSelect(-multiple => $TRUE);
print "</td></tr>\n";

print q{</table>};

print q{<table class="MedPaddedTable">};

foreach my $Partition (1..$MaxFields) {
  FieldListChooser(-partition => $Partition);
}

print q{<tr><td colspan="5" class="SubmitCell">};
 print $query -> submit (-value => "Change Display of Fields");
print "</td></tr>\n";

print q{</table>};
print $query -> end_multipart_form;

DocDBNavBar();
DocDBFooter($DBWebMasterEmail,$DBWebMasterName);
