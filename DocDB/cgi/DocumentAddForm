#! /usr/bin/env perl
#
# Author Eric Vaandering (ewv@fnal.gov)
#

# Copyright 2001-2005 Eric Vaandering, Lynn Garren, Adam Bryant

#    This file is part of DocDB.

#    DocDB is free software; you can redistribute it and/or modify
#    it under the terms of version 2 of the GNU General Public License 
#    as published by the Free Software Foundation.

#    DocDB is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU General Public License for more details.

#    You should have received a copy of the GNU General Public License
#    along with DocDB; if not, write to the Free Software
#    Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA

use CGI;                                                                                      
use DBI;

require "DocDBGlobals.pm";
require "Cookies.pm";
require "Scripts.pm";
require "Sorts.pm";
require "Messages.pm";

require "AuthorSQL.pm";
require "DocumentSQL.pm";
require "MeetingSQL.pm";
require "MiscSQL.pm";
require "RevisionSQL.pm";
require "SecuritySQL.pm";
require "TopicSQL.pm";

require "ResponseElements.pm";
require "FormElements.pm";
require "HTMLUtilities.pm";
require "Utilities.pm";
require "Defaults.pm";
require "Security.pm";
require "XRefUtilities.pm";

require "FileHTML.pm";
require "KeywordHTML.pm";
require "MeetingHTML.pm";
require "RevisionHTML.pm";
require "SecurityHTML.pm";
require "SignoffHTML.pm";
require "TalkHTML.pm";

$query = new CGI;  # Global for subroutines
$dbh   = DBI->connect('DBI:mysql:'.$db_name.':'.$db_host,$db_rouser,$db_ropass);

&GetAuthors;
&GetTopics;
&GetSecurityGroups;
&GetDocTypes;
&GetPrefsCookie;

%params = $query -> Vars;

my $Special      = $params{special};
my $DocumentID   = $params{docid};
my $ConferenceID = $params{conferenceid};
my $SessionID    = $params{sessionid};
my $Version      = $params{version};
my @PreTopics    = $query -> param('pretopic');
   $mode         = $params{mode}; # FIXME: Can't be my since used in subroutines

@TopicDefaults = ();
 
if ($Special eq "meeting")      {$Meeting = 1;}       # v7 can we remove these
if ($Special eq "othermeeting") {$OtherMeeting = 1;}  # v7 can we remove these

push @TopicDefaults,@PreTopics; 

if ($mode ne "add"    && $mode ne "reserve" && 
    $mode ne "update" && $mode ne "updatedb") {
  $mode = "add";
}  

&SetUploadMethod;
&SetDateOverride;
&SetAuthorMode;
&SetTopicMode;

if ($mode eq "add" || $mode eq "reserve") {
  &SetAuthorDefault;
}

print $query->header;
if      ($mode eq "add") {
  &DocDBHeader("$Project Document Addition","Document Addition", -scripts => ["PopUps","InsertRevisionNote"]);
} elsif ($mode eq "reserve") {
  &DocDBHeader("$Project Document Reservation","Document Reservation", -scripts => ["PopUps","InsertRevisionNote"]);
} elsif ($mode eq "update" || $mode eq "updatedb") {
  &DocDBHeader("$Project Document Update","Document Update", -scripts => ["PopUps","InsertRevisionNote"]);
}

@ErrorStack = ();
@WarnStack = ();

unless (&CanCreate()) {
  push @ErrorStack,"You are not allowed to modify or create documents.";
}
if ($mode eq "update" || $mode eq "updatedb") {
  unless ($params{docid}) {
    push @ErrorStack,"You must supply a document number to modify a document.";
  }
}
if ($mode eq "update" || $mode eq "add") {
  if ($Archive eq "archive" && $NumberUploads > 1) {
    push @ErrorStack,"You cannot upload more than one archive.";
  }
}

if (@ErrorStack) {  # The user made one or more mistakes, warn and exit
  &EndPage(@ErrorStack);
}

# Set required/optional information

my %RequiredEntries = (); 

$RequiredEntries{Title}     = 1;   # Note that this isn't completely
$RequiredEntries{Abstract}  = 1;   # functional. Some of these variables
$RequiredEntries{Keyword}   = 0;   # aren't passed, and of those that are
$RequiredEntries{Note}      = 0;   # some may be ignored.
$RequiredEntries{File}      = 1;   #
$RequiredEntries{Type}      = 1;   # After the defaults are set a hook could
$RequiredEntries{Requester} = 1;   # be installed to change these based on
$RequiredEntries{Author}    = 1;   # site policy. (And then enforced in
$RequiredEntries{Security}  = 0;   # ProcessDocumentAdd).
$RequiredEntries{Modify}    = 0;
$RequiredEntries{Topic}     = 1;
$RequiredEntries{Reference} = 0;
$RequiredEntries{PubInfo}   = 0;
$RequiredEntries{Signoff}   = 0;

if ($mode eq "reserve") {
  $RequiredEntries{Abstract}  = 0;
}  

my $DocRevID;

if ($mode eq "update" || $mode eq "updatedb") {
  &FetchDocument($DocumentID);
  unless (&CanModify($DocumentID)) {
    push @ErrorStack,"You are not allowed to modify this document.";
  }
}

if ($mode eq "updatedb") { 
  unless (defined $Version) {
    $Version = $Documents{$DocumentID}{NVersions};
  }  
  if ($Version != $Documents{$DocumentID}{NVersions}) {
    push @WarnStack,"You are about to update an old version of this document.";
  }
}    

if ($mode eq "update") {
  $Version = $Documents{$DocumentID}{NVersions};
}

my $SignoffsDefault; # FIXME: What other ones needn't be global?
my @SecurityDefaults = ();
my @ModifyDefaults   = ();
my @EventDefaults    = ();
my $RevisionNoteDefault; 
my $XRefDefault;
my $DocTypeIDDefault;
 
if ($mode eq "update" || $mode eq "updatedb") { # Need to read in last version values and update
  $DocRevID            = &FetchRevisionByDocumentAndVersion($DocumentID,$Version);
  $TitleDefault        = $DocRevisions{$DocRevID}{Title};
  $PubInfoDefault      = $DocRevisions{$DocRevID}{PUBINFO};
  $AbstractDefault     = $DocRevisions{$DocRevID}{ABSTRACT};
  $RequesterDefault    = $DocRevisions{$DocRevID}{Submitter};
  $KeywordsDefault     = $DocRevisions{$DocRevID}{Keywords};
  $RevisionNoteDefault = $DocRevisions{$DocRevID}{Note};
  $DocTypeIDDefault    = $DocRevisions{$DocRevID}{DocTypeID};
  @SecurityDefaults    = &GetRevisionSecurityGroups($DocRevID);
  @AuthorDefaults      = &GetRevisionAuthors($DocRevID);
  @TopicDefaults       = &GetRevisionTopics($DocRevID);
  @EventDefaults       = &GetRevisionEvents($DocRevID);
  @ReferenceDefaults   = &FetchReferencesByRevision($DocRevID);
  $XRefDefault         = &SetXRefDefault($DocRevID);
  if ($UseSignoffs) {
    require "SignoffUtilities.pm";
    $SignoffDefault     = &BuildSignoffDefault($DocRevID);
  }
} else {
  if ($DefaultPublicAccess) {
    @SecurityDefaults = (0);
  } else {
    my $User = &SecurityLookup($remote_user);
    @SecurityDefaults = ($SecurityIDs{$User}); 
  }
}  

if ($EnhancedSecurity) {
  @ModifyDefaults  = &GetRevisionModifyGroups($DocRevID);
  unless (@ModifyDefaults) {
    @ModifyDefaults  = @SecurityDefaults;
  }
  unless (@ModifyDefaults) { # A public doc with no list of who can modify
    $AllCanModifyPublic = 1;
  }    
}

# Warn the user if they are about to modify a controlled document

if ($UseSignoffs && ($mode eq "update" || $mode eq "updatedb")) {
  require "SignoffUtilities.pm";
  my ($Status) = &RevisionStatus($DocRevID);
  unless ($Status eq "Unmanaged") {
    push @WarnStack,$Msg_WarnModManaged;
  }  
}

# Find SessionTalks that the user might choose and display

my @OpenSessionTalkIDs = ();

# Explicit conference and session checks for things that aren't topics
# FIXME: Look into modification too

if ($mode eq "add" && ($SessionID||$ConferenceID)) {
  require "TalkSQL.pm";
  require "MeetingSQL.pm";
  
  my @CheckSessionTalkIDs = ();
  my $MinorTopicID;
  
  if ($SessionID) { # Build list for SessionID
    @CheckSessionTalkIDs = &FetchSessionTalksBySessionID($SessionID);
    &FetchSessionByID($SessionID);
    my $ConferenceID = $Sessions{$SessionID}{ConferenceID};
    &FetchConferenceByConferenceID($ConferenceID);
    $MinorTopicID = $Conferences{$ConferenceID}{Minor}; # FIXME: Why doesn't this work?
  } elsif ($ConferenceID) { # Build list for ConferenceID
    @CheckSessionTalkIDs = &FetchSessionTalksByConferenceID($ConferenceID);
    &FetchConferenceByConferenceID($ConferenceID);
    $MinorTopicID = $Conferences{$ConferenceID}{Minor};
  }    
  
  # Check list of SessionTalks
  
  foreach my $SessionTalkID (@CheckSessionTalkIDs) {
    unless ($SessionTalks{$SessionTalkID}{Confirmed}) {
      push @OpenSessionTalkIDs,$SessionTalkID;
    } 
  }
  
  # Add the topic for conference to defaults
  
  if ($MinorTopicID) {
    push @TopicDefaults,$MinorTopicID;
  }  
} elsif ($mode eq "add" && @TopicDefaults) { # Check all preselected topics, see if they are conferences, etc. 
  require "TalkSQL.pm";
  foreach my $MinorTopicID (@TopicDefaults) { #v7 get event ID directly
#    my $ConferenceID = &FetchConferenceByTopicID($MinorTopicID);
    if ($ConferenceID) {
      my @CheckSessionTalkIDs = &FetchSessionTalksByConferenceID($ConferenceID);
      foreach my $SessionTalkID (@CheckSessionTalkIDs) {
        unless ($SessionTalks{$SessionTalkID}{Confirmed}) {
          push @OpenSessionTalkIDs,$SessionTalkID;
        } 
      }
    }    
  }
}

&Unique(@TopicDefaults) ; # Make sure this list is unique

&EndPage(@ErrorStack); # The user may have made mistakes, warn and exit

&SetFileOptions($DocRevID);

print $query -> start_multipart_form('POST',$ProcessDocumentAdd);
print $query -> hidden(-name => 'mode',      -default => $mode);
print $query -> hidden(-name => 'upload',    -default => 'file');
print $query -> hidden(-name => 'archive',   -default => 'single');
print $query -> hidden(-name => 'docid',     -default => $DocumentID);
print $query -> hidden(-name => 'oldversion',-default => $Version);

if ($mode eq "updatedb") { 
  if (defined $params{version}) {
    print $query -> hidden(-name => 'version',   -default => $Version);
  }
}    

if ($Overdate eq "Yes") {
  print $query -> hidden(-name => 'overdate',-default => 'Yes');
} else {
  print $query -> hidden(-name => 'overdate',-default => '');
}  

print $query -> hidden(-name => 'special',-default => '');

&WarnPage(@WarnStack); @WarnStack = ();

print "<table class=\"CenteredTable HighPaddedTable\">\n";

print "<tr>\n";
print "<td colspan=\"4\">\n";
if ($mode eq "add") {
  if ($Meeting || $OtherMeeting) {
    print "<h4>You have chosen to add a new meeting talk to the database.<br/> 
               Make sure you know all the required information and
               the file is ready for uploading.<br/>
               This is a simplified form for adding information to the 
               database.<br/>
               If you need something more complicated, such as multiple authors
               or more upload boxes,<br> please use one of the options from
               the <a href=$ModifyHome>change/add page</a>.\n";
  } else {  
    print "<h4>You have chosen to add a new document to the database.<br/> 
               Make sure you know all the required information and
               the file is ready for uploading.<br/>\n";
  } 
} elsif ($mode eq "reserve") {
  print "<h4>You have chosen to reserve a new document document number in 
             the database. <br/>
             You CANNOT upload the document using this form.<br/>
             Make sure you know all the required information.<br/>\n";
} elsif ($mode eq "update") {
  $documentName = &FullDocumentID($DocumentID);
  print "<h4>You have chosen to update $documentName. 
             Make sure you know all the required information.<br/>\n";
} elsif ($mode eq "updatedb") {
  $documentName = &FullDocumentID($DocumentID,$Version);
  print "<h4>You have chosen to update the database for $documentName. 
             Make sure you know all the required information.<br/>\n";
}

print "Required fields are marked with an asterisk (*).<br/>";
print "Click on any of the headings for help.</h4>\n"; print "</td>\n";
print "</tr>\n";

### Title, abstract, and keywords

if (@OpenSessionTalkIDs) {
  print "<tr>\n";
  print "<td colspan=4>\n"; &SessionTalkPulldown(@OpenSessionTalkIDs);    print "</td>\n";
  print "</tr>\n";
}

print "<tr>\n";
print "<td colspan=4>\n"; 
 &TitleBox(-required => $RequiredEntries{Title});        
print "</td>\n";
print "</tr>\n";

print "<tr>\n";
print "<td colspan=4>\n";
 &AbstractBox(-required => $RequiredEntries{Abstract});     
print "</td>\n";
print "</tr>\n";

print "<tr>\n";
print "<td colspan=4>\n"; 
 &KeywordsBox(-required => $RequiredEntries{Keyword});     
print "</td>\n";
print "</tr>\n";

print "<tr>\n"; 
print "<td colspan=4>\n"; 
if ($mode eq "update") {
  &RevisionNoteBox(-jsinsert => $RevisionNoteDefault, 
                   -required => $RequiredEntries{Note}); 
} else {
  &RevisionNoteBox(-default  => $RevisionNoteDefault,  
                   -required => $RequiredEntries{Note}); 
}  
print "</td>\n";
print "</tr>\n";

### Files

if ($mode eq "add" || $mode eq "update") {
  my $CopyOption = ($mode eq "update");

  print "<tr><td colspan=4>\n";
  if ($Archive eq "archive") { 
    &ArchiveUploadBox(-required => $RequiredEntries{File});
  } else {
    &FileUploadBox(-allowcopy => $CopyOption, -type => $Upload, -docrevid => $DocRevID,
                   -addfiles => 1, -required  => $RequiredEntries{File}, -fileids => \@FileIDs);
  }
  print "<br/>Make sure you supply a format everyone can view (e.g. PDF) along
  with source formats.<br/>\n"; 
  print "</td></tr>";
} elsif ($mode eq "updatedb") {
  print "<tr><td colspan=\"4\">\n";
  &FileUploadBox(-desconly => true, -docrevid => $DocRevID,
                 -fileids  => \@FileIDs);
  print "</td></tr>";
}

### Document type and date override (if present)

print "<tr>\n";
if ($Meeting || $OtherMeeting) {
  print "<td colspan=\"2\">\n"; 
  my @TypeIDs = keys %DocumentTypes;
  foreach my $ID (@TypeIDs) {
    if ($DocumentTypes{$ID}{SHORT} eq "Talk") {
      $TalkTypeID = $ID;
      last;
    }
  }
  print "<b>Document type is: $DocumentTypes{$TalkTypeID}{SHORT}</b>\n";  
  print $query -> hidden(-name => 'doctype',  -default => $TalkTypeID);
  print "</td>\n";  
} else {
  print "<td colspan=\"2\">\n";
  &DocTypeButtons(-required => $RequiredEntries{Type}, 
                  -default  => $DocTypeIDDefault);
  print "</td>\n";
}

if ($Overdate eq "Yes") {
  print "<td colspan=\"2\">\n";
  &DateTimePullDown;
  print "</td>\n";
}  
print "</tr>\n";

### Requester, Authors, and security 

print "<tr>\n";
if ($Meeting || $OtherMeeting) {
  print "<td>&nbsp;&nbsp;&nbsp;</td>\n";
} 

print "<td>\n"; 
 my @RequesterDefaults = ($RequesterDefault);
 &AuthorScroll(-required => $RequiredEntries{Requester},
               -helplink => "requester",
               -helptext => "Requester",
               -name     => "requester",
               -default  => \@RequesterDefaults);
               
print "</td>\n";

unless ($Meeting || $OtherMeeting) {
  if ($AuthorMode eq "list") {
    print "<td>\n"; 
    &AuthorScroll(-required => $RequiredEntries{Author},
                  -helplink => "authors",
                  -multiple => "true",
                  -default  => \@AuthorDefaults);
    print "</td>\n";
  } elsif ($AuthorMode eq "field") {
    print "<td>\n"; &AuthorManual(-required => $RequiredEntries{Author});    print "</td>\n";
  }
}
print "<td>\n"; 
my $SecurityText;
if ($EnhancedSecurity) {
  $SecurityText = "View";
} else {
  $SecurityText = "Security";
}
&SecurityScroll(-addpublic => 'true',
                -name      => 'security', 
                -helplink  => 'security',
                -helptext  => $SecurityText,
                -multiple  => true,
                -default   => \@SecurityDefaults);
print "</td>\n";
if ($EnhancedSecurity) {
  print "<td>\n"; 
  &SecurityScroll(-name      => 'modify', 
                  -helplink  => 'modifygroups',
                  -helptext  => 'Modify',
                  -multiple  => true,
                  -default   => \@ModifyDefaults);
  print "</td>\n";
}
print "</tr>\n";

### Topics # FIXME: Use non-global defaults

print "<tr>\n";
if ($TopicMode eq "single") {
  print "<td colspan=\"4\">\n"; &TopicSelect(-required => $RequiredEntries{Author});     print "</td>\n";
} elsif ($TopicMode eq "multi") {
  print "<td colspan=\"4\">\n"; &MultiTopicSelect(-required => $RequiredEntries{Author});     print "</td>\n";
}
print "</tr>\n";

### Events

print "<tr>\n";
print "<td colspan=\"4\">\n";
 &EventSelect(-required => $FALSE,          -format   => "full", 
              -default  => \@EventDefaults, -multiple => $TRUE);
print "</td>\n";
print "</tr>\n";

### Cross-references to other documents

print "<tr>\n";
print "<td colspan=\"4\">\n"; 
&TextField(-name     => 'xrefs', -size => 40,
           -default  => $XRefDefault, 
           -helplink => 'xrefentry', -helptext => 'Related Documents');
print "</td>\n";
print "</tr>\n";

### References and Publication info

unless ($Meeting || $OtherMeeting) {
  print "<tr>\n";
  print "<td colspan=\"4\">\n"; &ReferenceForm;  print "</td>\n";
  print "</tr><tr>\n";
  print "<td colspan=\"4\">\n"; &PubInfoBox;  print "</td>\n";
  print "</tr>\n";
}

if ($UseSignoffs) { # FIXME: Later may be more complicated control
  print "<tr>\n";
    print "<td colspan=\"4\">\n"; 
      &SignoffBox(-default => $SignoffDefault); 
    print "</td>\n";
  print "</tr>\n";
}

print "<tr>\n<td colspan=\"4\" class=\"SubmitCell\">\n"; 
if      ($mode eq "add") {
  print $query -> submit (-value => "Submit document");
} elsif ($mode eq "reserve") {
  print $query -> submit (-value => "Request document ID");
} elsif ($mode eq "update" || $mode eq "updatedb") {
  print $query -> submit (-value => "Update document");
}
print "</td>\n</tr>\n";
print "</table>\n";

print "<p>";
print $query -> end_multipart_form;

&DocDBNavBar();
&DocDBFooter($DBWebMasterEmail,$DBWebMasterName);
