#! /usr/bin/env perl
#
#        Name: AdministerForm
# Description: This single form provides a number of interfaces to admin 
#              tools, each run by a different script. 
#
#      Author: Eric Vaandering (ewv@fnal.gov)
#    Modified: 
#

# Copyright 2001-2005 Eric Vaandering, Lynn Garren, Adam Bryant

#    This file is part of DocDB.

#    DocDB is free software; you can redistribute it and/or modify
#    it under the terms of version 2 of the GNU General Public License 
#    as published by the Free Software Foundation.

#    DocDB is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU General Public License for more details.

#    You should have received a copy of the GNU General Public License
#    along with DocDB; if not, write to the Free Software
#    Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA


use CGI qw(-nosticky);
use DBI;

require "DocDBGlobals.pm";
require "AdministerElements.pm";
require "ResponseElements.pm";
require "Scripts.pm";
require "Security.pm";
require "Messages.pm";
require "Sorts.pm";

require "DBUtilities.pm";
require "HTMLUtilities.pm";

require "MeetingSQL.pm";
require "SecuritySQL.pm";

require "MeetingHTML.pm";
require "TopicHTML.pm"; # For description boxes

$query = new CGI;  # Global for subroutines

%params = $query -> Vars;

my $Password         = $params{password};
my $Username         = $params{admuser};
my $Action           = $params{admaction};

my $SubForm          = $params{subform};
my $EventGroupID     = int($params{eventgroups});
my $EventID          = int($params{events});
my $ShortDescription = $params{shortdesc};
my $LongDescription  = $params{longdesc};

@ErrorStack = ();
@WarnStack  = ();

if ($Password && $Username) {
  &CreateConnection(-user => $Username, -password => $Password);
} else {
  &CreateConnection(-type => "ro");
}


&GetConferences;
&GetAllEventGroups;
&GetSecurityGroups;

print $query->header;
&DocDBHeader("Administer Events","",
             -scripts => ["PopUps","EventAdminDisable"]); 

unless (&CanAdminister()) {
  push @ErrorStack,"You are not allowed to access administrative functions.";
}

if (@ErrorStack) {  # The user made one or more mistakes, warn and exit
  &EndPage(@ErrorStack);
}

# Do administration

my $Abort = 0;
my @Actions = ();

if ($SubForm eq "eventgroup") {
  if      ($Action eq "Delete") {
    foreach my $EventID (keys %Conferences) {
      if ($Conferences{$ConferenceID}{EventGroupID} == $EventGroupID) {
        push @ErrorStack,$Msg_DelFullEvtGroup;
        $Abort = 1;
        last;
      }
    }
    unless ($Abort) {
      my $Delete = $dbh -> prepare("delete from EventGroup where EventGroupID=?");
      $Delete -> execute($EventGroupID);
      push @Actions,"Event group $EventGroups{$EventGroupID}{ShortDescription} deleted";
    }
  } elsif ($Action eq "Modify") {
    if ($ShortDescription) { 
      push @Actions,"Updated short description of $EventGroups{$EventGroupID}{ShortDescription}";
      my $Update = $dbh->prepare("update EventGroup set ShortDescription=? where EventGroupID=?");
      $Update -> execute($ShortDescription,$EventGroupID);
    }
    if ($LongDescription) { 
      push @Actions,"Updated long description of $EventGroups{$EventGroupID}{ShortDescription}";
      my $Update = $dbh->prepare("update EventGroup set LongDescription=? where EventGroupID=?");
      $Update -> execute($LongDescription,$EventGroupID);
    }
  } elsif ($Action eq "New") { 
    push @Actions,"New event group with description <strong>$ShortDescription</strong> inserted";
    my $Insert = $dbh -> prepare("insert into EventGroup (ShortDescription,LongDescription) values (?,?)"); 
    $Insert -> execute($ShortDescription,$LongDescription);
  } else {
    push @WarnStack,"No valid action was specified.";
  }  
} elsif ($SubForm eq "event") {
  if      ($Action eq "Delete") {
    my @DocRevIDs = &FetchRevisionsByEventID($EventID);
    if (@DocRevIDs) { 
      $Abort = 1;
    }  
    unless ($Abort) {
      my $Delete = $dbh -> prepare("delete from Conference where ConferenceID=?");
#      $Delete -> execute($EventID);
      push @Actions,"Event <strong>$Conferences{$ConferenceID}{Title}</strong> deleted";
    }
  } else {
    push @WarnStack,"Only \"Delete\" is a valid action";
  }  
}
   
if (@Actions) { #FIXME: Make into action stack, have action report clear, no params
  &ClearConferences;
  &ClearEventGroups;
  &GetConferences;
  &GetAllEventGroups;
  &ActionReport(@Actions); @Actions = ();
}  

&WarnPage(@WarnStack); @WarnStack = ();

print "<p>This form allows you to administer events in DocDB. Begin by
       selecting an action for what you want to administer.  Depending on the
       action you select, the additional selections you can  make are enabled.
       If you select <strong>Modify</strong> any attributes you select or
       change changed in the DB. If you leave something blank, it will not be
       changed. </p>\n";

print "<p>Note that deleting and then re-entering with the same information is
       not the same as modifying. Everything in the DB is tied together with
       invisible ID numbers.</p>\n";

print "<p>In all cases, you must supply the <i>database</i> username and
       password for the administrator account to make any changes.</p>\n";

print "<hr/>\n";

### Event Modification

print "<h4>Administer Event Groups</h4>\n";

print $query -> start_multipart_form('POST',"$EventAdministerForm",
                                     "id=\"eventgroup\" name=\"eventgroup\"");
print "<table class=\"HighPaddedTable CenteredTable\">\n";
print "<tr>\n";
print "<td colspan=\"3\">\n"; 
 &AdministerActions(-form => "eventgroup");
 print $query -> hidden(-name => "subform",   -default => "eventgroup");
print "</td>\n";
print "</tr>\n";

print "<tr>\n";
print "<td rowspan=\"3\">\n";
 &EventGroupSelect(-disabled => true, -format => "full"); 
print "</td>\n";  
print "<td>\n"; 
 &ShortDescriptionBox(-name => "shortdesc", -disabled => "true");
print "</td>\n";
print "</tr>\n";

print "<tr>\n";
print "<td>\n"; 
 &LongDescriptionBox(-name => "longdesc", -disabled => "true");
print "</td>\n";
print "</tr>\n";

print "<tr>\n";
print "<td>\n"; 
 &AdminRegardless();
print "</td>\n";
print "</tr>\n";

print "<tr>\n";
print "<td colspan=\"2\" class=\"SubmitCell\">\n";
 &AdministratorPassword;
 print "&nbsp;";
 print $query -> submit (-value => "Change Event Group Info");
print "</td>\n";
print "</tr>\n";

print "</table>\n";
print $query -> end_multipart_form;

print "<hr/>\n";

### Event Administration

print "<h4>Administer Events</h4>\n";

print $query -> start_multipart_form('POST',"$EventAdministerForm",
                                     "id=\"event\" name=\"event\"");
print "<table class=\"HighPaddedTable CenteredTable\">\n";
print "<tr>\n";
print "<td colspan=\"2\">\n"; 
print "You can only delete with this form; you can do everything else through event management.\n";
print "</td>\n";
print "</tr>\n";

print "<tr>\n";
print "<td colspan=\"2\">\n"; 
 &AdministerActions(-form => "event");
 print $query -> hidden(-name => "subform",   -default => "event");
print "</td>\n";
print "</tr>\n";

print "<tr>\n";
print "<td>\n";
 &EventSelect(-disabled => true, -format => "full"); 
print "</td>\n";  
print "<td>\n"; 
 &AdminRegardless();
print "</td>\n";
print "</tr>\n";

print "<tr>\n";
print "<td colspan=\"2\" class=\"SubmitCell\">\n";
 &AdministratorPassword;
 print "&nbsp;";
 print $query -> submit (-value => "Change Event Info");
print "</td>\n";
print "</tr>\n";

print "</table>\n";
print $query -> end_multipart_form;

print "<hr/>\n";

&DocDBNavBar();
&DocDBFooter($DBWebMasterEmail,$DBWebMasterName);
