#! /usr/bin/env perl
#
# Author Eric Vaandering (ewv@fnal.gov)
#

use Benchmark;
use CGI;
use DBI;

$StartTime = new Benchmark;

require "ResponseElements.pm";
require "MySQLAccess.pm";
require "DocDBGlobals.pm";
require "FSUtilities.pm";
require "WebUtilities.pm";
require "HTMLUtilities.pm";
require "Security.pm";

$query = new CGI;  # Global for subroutines
$dbh   = DBI->connect('DBI:mysql:'.$db_name.':'.$db_host,$db_rwuser,$db_rwpass);

&GetTopics; # FIXME Replace with fetches in right place
&GetSecurityGroups; # FIXME Replace with fetches in right place

### Set up, give user initial information

%params = $query -> Vars;
$mode = $params{mode};

print $query->header;
&BTeVHeader("BTeV Document Reservation Results","Reservation Results"); #FIXME

### Pull info out of params into local variables

$Archive   = $params{archive};
$Overdate  = $params{overdate};
$Overday   = $params{overday};
$Overmonth = $params{overmonth};
$Overyear  = $params{overyear};
$Overmin   = $params{overmin};
$Overhour  = $params{overhour};

if ($Archive eq "multi") {$Archive = "single";} # No real difference

if ($Overdate) {
  $SQL_NOW = "$Overyear-$ReverseAbrvMonth{$Overmonth}-$Overday $Overhour:$Overmin:00";
} else {
  my ($sec,$min,$hour,$day,$mon,$year) = localtime(time); 
  $year += 1900;
  ++$mon;
  $SQL_NOW = "$year-$mon-$day $hour:$min:$sec";
}  

if ($mode ne "add"    && $mode ne "reserve" && 
    $mode ne "update" && $mode ne "updatedb") {
  &EndPage("<p><h3>You accessed this page without 
            specifying a required parameter. 
            Don't mess with hidden fields or 
            try to access this page directly.</h3>\n"); 
}  

if      ($mode eq "add") {
  print "<p><h3>Here are the results of your attempt to add a document
                into the BTeV document database:</h3><p>\n";
} elsif ($mode eq "reserve") {              
  print "<p><h3>Here are the results of your attempt to reserve a document
                number in the BTeV document database:</h3><p>\n";
} elsif ($mode eq "update") {              
  print "<p><h3>Here are the results of your attempt to update a document
                in the BTeV document database:</h3><p>\n";
}

### Database insert templates

my $document_insert = $dbh->prepare(
   "insert into Document ".
          "(DocumentID, RequesterID, RequestDate, DocumentType) ". 
   "values (0,          ?,           ?,           ?)");
            
my $doc_rev_insert = $dbh->prepare(
   "insert into DocumentRevision ".
   "(DocRevID, DocumentID, SubmitterID, DocumentTitle, PublicationInfo, ". 
   " VersionNumber, Abstract, RevisionDate) ". 
   "values (0,?,?,?,?,?,?,?)");
            
my $rev_author_insert =  $dbh->prepare(
   "insert into RevisionAuthor ".
   "       (RevAuthorID, DocRevID, AuthorID) ".
   "values (0,           ?,        ?)");
                                 
my $rev_security_insert =  $dbh->prepare(
   "insert into RevisionSecurity ".
   "       (RevSecurityID, DocRevID, GroupID) ".
   "values (0,             ?,        ?)");
                                 
my $rev_topic_insert = $dbh->prepare(
   "insert into RevisionTopic ".
   "       (RevTopicID, DocRevID, MinorTopicID) ".
   "values (0,          ?,        ?)");

my $file_insert = $dbh->prepare(
   "insert into DocumentFile ".
   "       (DocFileID, DocRevID, FileName, Date, RootFile, Description) ".
   "values (0,         ?,        ?,        ?,    ?       , ?)");

# FIXME: Build links for other document actions to use below

### Check parameters for errors

@error_stack = ();
@warn_stack  = ();

unless ($params{requester}) {
  push @error_stack,"You must supply a requester for this document.";
}
unless ($params{title}) {
  push @error_stack,"You must supply a title for this document.";
}
if ($mode eq "add" || $mode eq "reserve") {
  unless ($params{doctype}) {
    push @error_stack,"You must supply a document type for this document.";
  }
}
if ($mode eq "add" || $mode eq "update") {
  unless ($params{authors}) {
    push @error_stack,"You must supply at least one author for this document.";
  }
  unless ($params{topics}) {
    push @error_stack,"You must supply at least one topic for this document.";
  }
  unless ($params{abstract}) {
    push @error_stack,"You must supply an abstract for this document.";
  }
  unless ($params{single_upload} || $params{single_http}) {
    push @error_stack,"You must supply a file for this document.";
    push @error_stack,"If you just want to change information about the
    document, choose `Update DB Info' instead.";
  }
  if     ($params{single_upload} && $params{single_http}) {
    push @error_stack,"You may not specify both URL and file upload.";
  }
  if     (!$params{mainfile} && $Archive eq "archive") {
    push @error_stack,"You must specify a main file in the archive.";
  }
  
  if ($params{single_http}) {
    if ($params{http_user} && $params{http_pass}) {
      $Authentication = " --http-user $params{http_user} --http-pass $params{http_pass} ";
    } else {
      $Authentication = "";
    }  
    my @urls = split /\0/,$params{single_http};
    foreach my $url (@urls) {
      if (&ValidURL($url)) {
        my $command = $Wget.$Authentication.$url;
        my @url_lines = `$command`;
        unless (@url_lines) {
          push @error_stack,"The URL <tt>$url</tt> was not present or was protected.";
        }
      } else {
        push @error_stack,"The URL <tt>$url</tt> is not well formed. Don't forget ".
                          "http:// on the front and a file name after the last /.";
      }
    }  
  }  
}

if ($mode eq "update" || $mode eq "updatedb") {
  unless ($params{docid}) {
    push @error_stack,"You must supply a document number to modify a document.";
  }
}

### Final checks

@authorIDs  = split ("\0",$params{authors}); 
@topicIDs   = split ("\0",$params{topics});
@securities = split ("\0",$params{security});

if ($#securities > 0) {
  foreach my $GroupID (@securities) {
    if ($GroupID == 0) {
      push @error_stack,"You selected \"Public\" and another form of security. ".
                    "You may only select \"Public\" by itself.";
    }
  }  
}
  
if ((@error_stack)) {  # The user made one or more mistakes, warn and exit
  &EndPage(@error_stack);
}

### Make entry in DocumentDatabase or get document ID

my $documentID;
if ($mode eq "reserve" || $mode eq "add") {
  $document_insert -> execute($params{requester},$SQL_NOW,$params{doctype});
  $documentID = $document_insert -> {mysql_insertid}; # Works with MySQL only
} else {
  $documentID = $params{docid};
}  

### Set version number

my $version;
if      ($mode eq "reserve") {
  $version   = 0;
} elsif ($mode eq "add") {
  $version   = 1;
} elsif ($mode eq "update") {
  &FetchDocument($documentID);
  $version   = $Documents{$documentID}{NVER} + 1;
} elsif ($mode eq "updatedb") {
  &FetchDocument($documentID);
  $version   = $Documents{$documentID}{NVER};
}

if ($mode eq "updatedb") { # New Document revision replaces old. Fetch 
                           # old DocumentRevision and mark it obsolete
  $oldRevID = &FetchDocRevision($documentID,$version);
  my $obsolete_revision = $dbh -> prepare(
     "update DocumentRevision set Obsolete=1 where DocRevID=?");
  $obsolete_revision -> execute($oldRevID); 
}  

### Add entry to Document Revision

$doc_rev_insert -> execute($documentID,$params{requester},$params{title},
                           $params{pubinfo},$version,$params{abstract},$SQL_NOW);
my $docRevID = $doc_rev_insert -> {mysql_insertid}; # Works with MySQL only

### Add to authors, topics and securities
                           
foreach $authorID (@authorIDs) {
  $rev_author_insert -> execute($docRevID,$authorID);
}
foreach $topicID (@topicIDs) {
  $rev_topic_insert -> execute($docRevID,$topicID);
}
foreach $securityID (@securities) {
  if ($securityID) {  # Skip "0/Public" 
    $rev_security_insert -> execute($docRevID,$securityID);
  }  
}

### Deal with files

if ($mode eq "updatedb") { # Copy DocumentFile entries
  &ProtectDirectory($documentID,$version,@securities); # Redo security 
 
  my ($FileName,$Date,$RootFile,$Description);

  my $file_list = $dbh->prepare(
    "select FileName,Date,RootFile,Description from DocumentFile where DocRevID=?");

  $file_list -> execute($oldRevID);
  $file_list -> bind_columns(undef, \($FileName,$Date,$RootFile,$Description));
  while ($file_list -> fetch) { # Copy
    $file_insert -> execute($docRevID,$FileName,$Date,$RootFile,$Description);
  }  
}  

if ($mode eq "add" || $mode eq "update") { # We're adding new files
  
  $new_dir = &MakeDirectory($documentID,$version);
  &ProtectDirectory($documentID,$version,@securities);
  
  @short_files = ();
  if ($Archive eq "single") { # The user uploaded the files themselves 
    @Descriptions = split ("\0",$params{filedesc});
    @Roots = split ("\0",$params{root});
    if ($params{single_upload}) { # Copy file to directory
      @long_files   = $query ->  param("single_upload");
      foreach $long_file (@long_files) {
        $short_file = &ProcessUpload($new_dir,$long_file);
        push @short_files,$short_file;
      }
    } elsif ($params{single_http}) {
      @urls = split /\0/,$params{single_http};
      foreach $url (@urls) {
        $short_file = &ProcessURL($new_dir,$url);
        push @short_files,$short_file;
      }  
    }
  } elsif ($Archive eq "archive") { # They uploaded a tar/zip file
    @short_files = ();
    @Descriptions = ();
    @Roots = ();
    if ($params{single_upload}) { # Copy tar file to directory
      $long_file = $query ->  param("single_upload"); # There can be only one
      $short_file = &ProcessUpload($new_dir,$long_file);
      
      &ProcessArchive($new_dir,$short_file);
    } elsif ($params{single_http}) {
      $url = $params{single_http};  # There can be only one
      $short_file = &ProcessURL($new_dir,$url);
      &ProcessArchive($new_dir,$short_file);
    } 
  } # Archive upload

### Insert into Files database

  foreach $short_file (@short_files) {
    $Description = shift @Descriptions;
    $rootfile = shift @Roots;
    if ($rootfile eq "on") {
      $rootfile = 1;
    } else {
      $rootfile = 0;
    }    
    $file_insert -> execute($docRevID,$short_file,$SQL_NOW,$rootfile,$Description);
  }
} # File upload for "add" and "update"

### If we had any warnings print them out now

if (@warn_stack) {
  &WarnPage(@warn_stack);
  @warn_stack = ();
}
  
if ($mode = "updatedb") { # Local DB not in sync, clear it
  %DocRevIDs    = ();
  %DocRevisions = ();
  %Documents    = ();
  @DocumentIDs  = ();
}

# Output feedback to the user

$full_docid = &FullDocumentID($documentID);
my $DocRevID   = &FetchDocRevision($documentID,$version);

unless ($DocRevID) {
  print "This document does not exist.<p>\n";
  exit;
  print $query->end_html;
}

print "You were successful. Your Document ID is <b>$full_docid, version
       $version</b><br>  Please make a note of the document number as you
       will need it to update your document.<br> Your entry was created with
       the following information: <p>\n"; 

&PrintRevisionInfo($DocRevID);
&OtherVersionLinks($documentID,$version);

$EndTime  = new Benchmark;
$TimeDiff = timediff($EndTime,$StartTime);
print "<p><b>Execution time: </b>",timestr($TimeDiff),"<p>\n";

&DocDBNavBar();
&BTeVFooter($DBWebMasterEmail,$DBWebMasterName);
