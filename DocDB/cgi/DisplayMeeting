#! /usr/bin/env perl
#
#        Name: DisplayMeeting
# Description: Displays talks for a meeting or just a session of a meeting
# 
#      Author: Eric Vaandering (ewv@fnal.gov)
#    Modified: 

# Copyright 2001-2006 Eric Vaandering, Lynn Garren, Adam Bryant

#    This file is part of DocDB.

#    DocDB is free software; you can redistribute it and/or modify
#    it under the terms of version 2 of the GNU General Public License 
#    as published by the Free Software Foundation.

#    DocDB is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU General Public License for more details.

#    You should have received a copy of the GNU General Public License
#    along with DocDB; if not, write to the Free Software
#    Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA

use Benchmark;
use CGI;
use DBI;

$StartTime = new Benchmark;

require "DocDBGlobals.pm";
require "Messages.pm";

require "HTMLUtilities.pm";
require "ResponseElements.pm";
require "Sorts.pm";
require "Scripts.pm";
require "Security.pm";
require "MeetingSecurityUtilities.pm";

require "MeetingHTML.pm";
require "DocumentHTML.pm";
require "MeetingSQL.pm";
require "RevisionSQL.pm";

require "TalkHintUtilities.pm";
require "DocumentUtilities.pm";

$query = new CGI;  # Global for subroutines

%params = $query -> Vars;

my $SessionID          = $params{sessionid};
my $SessionSeparatorID = $params{sessionseparatorid};
my $ConferenceID       = $params{conferenceid};
my $EventID            = $ConferenceID;

@ErrorStack = ();
@WarnStack  = ();

$dbh   = DBI -> connect('DBI:mysql:'.$db_name.':'.$db_host,$db_rouser,$db_ropass);
unless ($dbh) {
  push @ErrorStack,$Msg_NoConnect;
}         

my $PageTitle = "Unknown Event";
if (!$dbh) {
  $PageTitle = "Database Error";
} elsif ($SessionID ) {
  FetchSessionByID($SessionID);
  $PageTitle = $Sessions{$SessionID}{Title};
} elsif ($SessionSeparatorID) {
  FetchSessionSeparatorByID($SessionSeparatorID);
  $PageTitle = $SessionSeparators{$SessionSeparatorID}{Title};
} else {  
  FetchConferenceByConferenceID($EventID);
  $PageTitle = $Conferences{$EventID}{Title};
}  

print $query -> header;
DocDBHeader($PageTitle,"", -scripts => ["PopUps"]);
EndPage(@ErrorStack);

my $DisplayMode = "";
my $OnlyOneSession = 0;

if ($ConferenceID) {
  $DisplayMode = "Conference";
  my @MeetingOrderIDs = FetchMeetingOrdersByConferenceID($ConferenceID);
  @MeetingOrderIDs = sort MeetingOrderIDByOrder @MeetingOrderIDs; 
  if ($#MeetingOrderIDs == 0) { # If just one session, switch to session mode
    $DisplayMode    = "Session";
    $OnlyOneSession = 1;
    $MeetingOrderID = pop @MeetingOrderIDs;
    $SessionID = $MeetingOrders{$MeetingOrderID}{SessionID};
  }
} elsif ($SessionID) {
  $DisplayMode = "Session";
  FetchSessionByID($SessionID);
  $ConferenceID = $Sessions{$SessionID}{ConferenceID};
  my @MeetingOrderIDs = FetchMeetingOrdersByConferenceID($ConferenceID);
  @MeetingOrderIDs = sort MeetingOrderIDByOrder @MeetingOrderIDs; 
  if ($#MeetingOrderIDs == 0) { # If just one session, switch to session mode
    $OnlyOneSession = 1;
  }
} elsif ($SessionSeparatorID) {
  $DisplayMode = "Separator";
  FetchSessionSeparatorByID($SessionSeparatorID);
  $ConferenceID = $SessionSeparators{$SessionSeparatorID}{ConferenceID};
}

FetchConferenceByConferenceID($ConferenceID);
unless ($Conferences{$ConferenceID}{TimeStamp}) {
  push @ErrorStack,"No such event exists.";
}  
unless (CanAccessMeeting($ConferenceID)) {
  push @ErrorStack,$Msg_MeetNoAccess;
}
EndPage(@ErrorStack);

# Prepare output

if ($DisplayMode eq "Session") { # Display a single session
  ReHintTalksBySessionID($SessionID); 
  ClearSessionTalks();
  FetchSessionByID($SessionID);
} elsif ($DisplayMode eq "Separator") { 
  FetchSessionSeparatorByID($SessionSeparatorID);
} elsif ($DisplayMode eq "Conference") { # Display meeting info or meeting with all talks
  my @MeetingOrderIDs = &FetchMeetingOrdersByConferenceID($ConferenceID);
  @MeetingOrderIDs = sort MeetingOrderIDByOrder @MeetingOrderIDs; 
}


print "<div id=\"EventInfo\">\n";
  
### Header info
  
print "<div id=\"Header3Col\">\n";
print "Header: Nothing here for now\n";
print "</div>\n";  # Header3Col

### Left Column

print "<div id=\"LeftColumn3Col\">\n";
PrintEventLeftSidebar( {-sessionid => $SessionID, -eventid => $EventID, -displaymode => $DisplayMode} );

print "</div>\n";  # LeftColumn3Col

### Main Column

print "<div id=\"MainColumn3Col\">\n";

### Right column (wrapped around by middle column)

print "<div id=\"RightColumn3Col\">\n";


print "</div>\n";  # RightColumn3Col

### Main column content starts here


print "</div>\n";  # MainColumn3Col

### Footer
  
print "<div id=\"Footer3Col\">\n"; # Must have to keep NavBar on true bottom
print "</div>\n";  # Footer3Col

print "</div>\n"; # EventInfo

if ($DisplayMode eq "Session") { # Display a single session
  ReHintTalksBySessionID($SessionID); 
  ClearSessionTalks();
  FetchSessionByID($SessionID);
  PrintSingleSessionHeader(-sessionid => $SessionID, -onlyone => $OnlyOneSession);
  PrintSession(-sessionid => $SessionID, -skipheader => $TRUE); 
  PrintMeetingEpilogue($ConferenceID);
} elsif ($DisplayMode eq "Separator") { 
  FetchSessionSeparatorByID($SessionSeparatorID);
  PrintMeetingInfo($SessionSeparators{$SessionSeparatorID}{ConferenceID});
  PrintSessionSeparator($SessionSeparatorID);
  PrintMeetingEpilogue($SessionSeparators{$SessionSeparatorID}{ConferenceID});
} elsif ($DisplayMode eq "Conference") { # Display meeting info or meeting with all talks
  my @MeetingOrderIDs = &FetchMeetingOrdersByConferenceID($ConferenceID);
  @MeetingOrderIDs = sort MeetingOrderIDByOrder @MeetingOrderIDs; 

  my $AddNavBar = $Conferences{$ConferenceID}{ShowAllTalks};
  PrintMeetingInfo($ConferenceID,-talklink => 1,-navbar => $AddNavBar);
  
  if ($Conferences{$ConferenceID}{ShowAllTalks}) { # Display all talks, sessions
    # FIXME: Add a Navbar of sorts?
    foreach $MeetingOrderID (@MeetingOrderIDs) { # Loop over sessions/breaks
      my $SessionID          = $MeetingOrders{$MeetingOrderID}{SessionID};
      my $SessionSeparatorID = $MeetingOrders{$MeetingOrderID}{SessionSeparatorID};
      if ($SessionID) {
        ReHintTalksBySessionID($SessionID); 
        ClearSessionTalks();
        FetchSessionByID($SessionID);
        PrintSession(-sessionid => $SessionID); # Display a single session
      } elsif ($SessionSeparatorID) {
        FetchSessionSeparatorByID($SessionSeparatorID);
        PrintSessionSeparator($SessionSeparatorID); # Display session separator
      }
    }   
  } else { # Display links to sessions and info on separators
    print "<table class=\"MedPaddedTable CenteredTable\">\n";
    print "<tr><th>Session Title</th>\n";
    print "<th>Date &amp; Time</th>\n";
    print "<th>Session Information</th>\n";
    print "<th>Location</th>\n";
    print "</tr>\n";
    foreach $MeetingOrderID (@MeetingOrderIDs) {
      my $SessionID          = $MeetingOrders{$MeetingOrderID}{SessionID};
      my $SessionSeparatorID = $MeetingOrders{$MeetingOrderID}{SessionSeparatorID};
      if ($SessionID) {
        PrintSessionInfo($SessionID);                   # Session info and link to session
      } elsif ($SessionSeparatorID) {
        PrintSessionSeparatorInfo($SessionSeparatorID); # SessionSeparator info 
      }
    }  
    print "</table><hr/>\n";
  }
  
# Finish off meeting display  
  
  PrintMeetingEpilogue($ConferenceID);
} else {
  # Complain that user didn't specify a session, break, or conference
}  

if ($DisplayMode eq "Session" || $DisplayMode eq "Conference") { # Display talks not associated with sessions  
  require "Utilities.pm";
  my %AgendaDocIDs = ();
  my %AllDocIDs    = ();
  
  # Flag documents which are associated with a session
  my @MeetingOrderIDs = &FetchMeetingOrdersByConferenceID($ConferenceID);
  foreach $MeetingOrderID (@MeetingOrderIDs) {
    my $SessionID = $MeetingOrders{$MeetingOrderID}{SessionID};
    if ($SessionID) {
      my @SessionTalkIDs = &FetchSessionTalksBySessionID($SessionID);
      foreach my $SessionTalkID (@SessionTalkIDs) {
        if ($SessionTalks{$SessionTalkID}{DocumentID}) {
          $AgendaDocIDs{$SessionTalks{$SessionTalkID}{DocumentID}} = 1;
        }
      } 
    }
  }   

  # Get documents associated with event

  my @AllRevisionIDs = &FetchRevisionsByEventID($ConferenceID);
  foreach my $DocRevID (@AllRevisionIDs) {
    if ($DocRevisions{$DocRevID}{DOCID}) {
      $AllDocIDs{$DocRevisions{$DocRevID}{DOCID}} = 1;
    }  
  }

  my @AgendaDocIDs = keys %AgendaDocIDs;
  my @AllDocIDs    = keys %AllDocIDs;

  # Find which ones aren't
  my @UnusedDocIDs = &RemoveArray(\@AllDocIDs,@AgendaDocIDs);
  
  # Print out info for unused documents
  if (@UnusedDocIDs) {
    print "<h4>Other documents for this event or <a href=\"$ListBy?eventid=$ConferenceID\">simple list</a> of all documents for this event</h4>\n";
    my %FieldList = PrepareFieldList(-default => "Default");
    my $NumberOfDocuments = DocumentTable(-fieldlist => \%FieldList,
         -docids  => \@UnusedDocIDs, -sortby  => "date",  
         -reverse => $TRUE);
    print "<hr/>\n";
  } else {
    print "<h4><a href=\"$ListBy?eventid=$ConferenceID\">Simple list</a> of all documents for this event</h4>\n";
  }
}

$EndTime  = new Benchmark;

&DocDBNavBar();
&DocDBFooter($DBWebMasterEmail,$DBWebMasterName);
 
exit;
