#! /usr/bin/env perl
#
#        Name: DisplayMeeting
# Description: Displays talks for a meeting or just a session of a meeting
# 
#      Author: Eric Vaandering (ewv@fnal.gov)
#    Modified: 

# Copyright 2001-2005 Eric Vaandering, Lynn Garren, Adam Bryant

#    This file is part of DocDB.

#    DocDB is free software; you can redistribute it and/or modify
#    it under the terms of version 2 of the GNU General Public License 
#    as published by the Free Software Foundation.

#    DocDB is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU General Public License for more details.

#    You should have received a copy of the GNU General Public License
#    along with DocDB; if not, write to the Free Software
#    Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA

use Benchmark;
use CGI;
use DBI;

$StartTime = new Benchmark;

require "DocDBGlobals.pm";
require "Messages.pm";

require "HTMLUtilities.pm";
require "ResponseElements.pm";
require "Sorts.pm";
require "Scripts.pm";
require "Security.pm";
require "MeetingSecurityUtilities.pm";

require "MeetingHTML.pm";
require "DocumentHTML.pm";
require "MeetingSQL.pm";

require "TalkHintUtilities.pm";

$query = new CGI;  # Global for subroutines

%params = $query -> Vars;

my $SessionID          = $params{sessionid};
my $SessionSeparatorID = $params{sessionseparatorid};
my $ConferenceID       = $params{conferenceid};

@ErrorStack = ();
@WarnStack  = ();

$dbh   = DBI -> connect('DBI:mysql:'.$db_name.':'.$db_host,$db_rouser,$db_ropass);

print $query -> header;

if ($SessionID ) {
  &DocDBHeader("Session and Talks", "", -scripts => ["PopUps"]);
} elsif ($SessionSeparatorID) {
  &DocDBHeader("Break Information", "", -scripts => ["PopUps"]);
} else {  
  &DocDBHeader("Event",             "", -scripts => ["PopUps"]);
}  

unless ($dbh) {
  push @ErrorStack,$Msg_NoConnect;
}         
&EndPage(@ErrorStack);

my $DisplayMode = "";
my $OnlyOneSession = 0;

if ($ConferenceID) {
  $DisplayMode = "Conference";
  my @MeetingOrderIDs = &FetchMeetingOrdersByConferenceID($ConferenceID);
  @MeetingOrderIDs = sort MeetingOrderIDByOrder @MeetingOrderIDs; 
  if ($#MeetingOrderIDs == 0) { # If just one session, switch to session mode
    $DisplayMode    = "Session";
    $OnlyOneSession = 1;
    $MeetingOrderID = pop @MeetingOrderIDs;
    $SessionID = $MeetingOrders{$MeetingOrderID}{SessionID};
  }
} elsif ($SessionID) {
  $DisplayMode = "Session";
  &FetchSessionByID($SessionID);
  $ConferenceID = $Sessions{$SessionID}{ConferenceID};
} elsif ($SessionSeparatorID) {
  $DisplayMode = "Separator";
  &FetchSessionSeparatorByID($SessionSeparatorID);
  $ConferenceID = $SessionSeparators{$SessionSeparatorID}{ConferenceID};
}

unless (&CanAccessMeeting($ConferenceID)) {
  push @ErrorStack,$Msg_MeetNoAccess;
}
&EndPage(@ErrorStack);

if ($DisplayMode eq "Session") { # Display a single session
  &ReHintTalksBySessionID($SessionID); 
  &ClearSessionTalks();

  &FetchSessionByID($SessionID);
  $ConferenceID = $Sessions{$SessionID}{ConferenceID};
  &FetchConferenceByConferenceID($ConferenceID);
  &PrintSingleSessionHeader(-sessionid => $SessionID, -onlyone => $OnlyOneSession);
  &PrintSession(-sessionid => $SessionID, -skipheader => $TRUE); 
  &PrintMeetingEpilogue($ConferenceID);
} elsif ($DisplayMode eq "Separator") { # Display a single break (never called)
  &FetchSessionSeparatorByID($SessionSeparatorID);
  &FetchConferenceByConferenceID($SessionSeparators{$SessionSeparatorID}{ConferenceID});
  &PrintMeetingInfo($Sessions{$SessionID}{ConferenceID});
  &PrintSessionSeparator($SessionSeparatorID);
  &PrintMeetingEpilogue($Sessions{$SessionID}{ConferenceID});
} elsif ($DisplayMode eq "Conference") { # Display meeting info or meeting with all talks

  &FetchConferenceByConferenceID($ConferenceID);
    
  my @MeetingOrderIDs = &FetchMeetingOrdersByConferenceID($ConferenceID);
  @MeetingOrderIDs = sort MeetingOrderIDByOrder @MeetingOrderIDs; 

  my $AddNavBar = $Conferences{$ConferenceID}{ShowAllTalks};
  &PrintMeetingInfo($ConferenceID,-talklink => 1,-navbar => $AddNavBar);
  
  if ($Conferences{$ConferenceID}{ShowAllTalks}) { # Display all talks, sessions
    # FIXME: Add a Navbar of sorts?
    foreach $MeetingOrderID (@MeetingOrderIDs) { # Loop over sessions/breaks
      my $SessionID          = $MeetingOrders{$MeetingOrderID}{SessionID};
      my $SessionSeparatorID = $MeetingOrders{$MeetingOrderID}{SessionSeparatorID};
      if ($SessionID) {
        &ReHintTalksBySessionID($SessionID); 
        &ClearSessionTalks();
        &FetchSessionByID($SessionID);
        &PrintSession(-sessionid => $SessionID); # Display a single session
      } elsif ($SessionSeparatorID) {
        &FetchSessionSeparatorByID($SessionSeparatorID);
        &PrintSessionSeparator($SessionSeparatorID); # Display session separator
      }
    }   
  } else { # Display links to sessions and info on separators
    print "<table class=\"MedPaddedTable CenteredTable\">\n";
    print "<tr><th>Session Title</th>\n";
    print "<th>Date &amp; Time</th>\n";
    print "<th>Session Information</th>\n";
    print "<th>Location</th>\n";
    print "</tr>\n";
    foreach $MeetingOrderID (@MeetingOrderIDs) {
      my $SessionID          = $MeetingOrders{$MeetingOrderID}{SessionID};
      my $SessionSeparatorID = $MeetingOrders{$MeetingOrderID}{SessionSeparatorID};
      if ($SessionID) {
        &PrintSessionInfo($SessionID); # Session info and link to session
      } elsif ($SessionSeparatorID) {
        &PrintSessionSeparatorInfo($SessionSeparatorID); # SessionSeparator info 
      }
    }  
    print "</table><hr width=\"95%\" />\n";
  }
  
# FIXME: display talks not associated with sessions  

#  if ($Conferences{$ConferenceID}{Minor}) {
        
    # Refetch all talks, flag talks which are associated with a session
#    my @MeetingOrderIDs = &FetchMeetingOrdersByConferenceID($ConferenceID);
#    foreach $MeetingOrderID (@MeetingOrderIDs) {
#      my $SessionID = $MeetingOrders{$MeetingOrderID}{SessionID};
#      if ($SessionID) {
#        my @SessionTalkIDs = &FetchSessionTalksBySessionID($SessionID);
#        foreach my $SessionTalkID (@SessionTalkIDs) {
#          if ($SessionTalks{$SessionTalkID}{DocumentID}) {
#            $DocumentIDs{$SessionTalks{$SessionTalkID}{DocumentID}} = 0;
#          }
#        } 
#      }
#    }   

    # Find which ones aren't
#    my @UnusedDocIDs = ();
#    foreach my $DocumentID (keys %DocumentIDs) {
#      if ($DocumentIDs{$DocumentID}) {
#        push @UnusedDocIDs,$DocumentID;
#      }  
#    }
    
    # Print out info for unused documents
#    if (@UnusedDocIDs) {
#      my $SortBy  = "date";
#      my @Fields = ("Docid","Title","Author","Updated"); 
#      my $Reverse = 1;
#      print "<h4>Other talks for this meeting:</h4>\n";
#      my $NumberOfDocuments = &DocumentTable(-fields  => \@Fields, 
#           -docids  => \@UnusedDocIDs, -sortby  => $SortBy,  
#           -reverse => $Reverse);
#      print "<hr width=\"95%\"/>\n";
#    }
#  }
  
# Finish off meeting display  
  
  &PrintMeetingEpilogue($ConferenceID);
} else {
  #Complain that user didn't specify a session, break, or conference
}  

$EndTime  = new Benchmark;

&DocDBNavBar();
&DocDBFooter($DBWebMasterEmail,$DBWebMasterName);
 
exit;
