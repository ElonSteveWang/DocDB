#! /usr/bin/env perl
#
#        Name: EmailAdminister 
# Description: This script is called by EmailAdministerForm and does 
#              administration on users who have signed up for email from the
#              DB. Since users can change almost everything, it really just
#              deletes users and changes their passwords in case they forget.
#              It also displays all the users and their notification 
#              preferences.
#
#      Author: Eric Vaandering (ewv@fnal.gov)
#    Modified: 
#

use CGI;
use DBI;

require "DocDBGlobals.pm";
require "ResponseElements.pm";
require "Security.pm";
require "HTMLUtilities.pm";
require "SecuritySQL.pm";
require "Messages.pm";

$query = new CGI;  # Global for subroutines

print $query->header;
&DocDBHeader("Modified E-mail Users");

%params = $query -> Vars;

@ErrorStack = ();
@WarnStack  = ();

# Parameters to script 

my $Password      = $params{password};
my $Username      = $params{admuser};
my $Action        = $params{admaction};

my $EmailUserID   = $params{emailuserid};
my $NewPassword   = $params{resetpw};

$dbh   = DBI->connect('DBI:mysql:'.$db_name.':'.$db_host,$Username,$Password);

unless ($dbh) {
  push @ErrorStack,$Msg_AdminNoConnect;
}         

print $query->header;
&DocDBHeader("Modified E-mail Users");

&EndPage(@ErrorStack);

unless (&CanAdminister) {
  push @ErrorStack,$Msg_AdminNoLogin;
}  
&EndPage(@ErrorStack);

&GetSecurityGroups;

if      ($Action eq "Delete") { # Delete user
  if (!$EmailUserID) {
    push @ErrorStack,$Msg_ModEUserEmpty;
  } else {
    my $UserDelete = $dbh -> prepare("delete from EmailUser where EmailUserID=?");
       $UserDelete -> execute($EmailUserID);

    my @NotifyTimes = ("Immediate","Daily","Weekly");
    my @NotifyTypes = ("Author","Keyword","Topic");
    foreach my $NotifyType (@NotifyTypes) {  # Loop over all tables and delete
      foreach my $NotifyTime (@NotifyTimes) {
        my $Table = "Email$NotifyType$NotifyTime";
        my $NotifyDelete = $dbh -> prepare("delete from $Table where EmailUserID=?");
           $NotifyDelete -> execute($EmailUserID);
      }  
    }
  }
  print "<b>The User was deleted.</b><p>\n";
} elsif ($Action eq "Modify") { 
  unless ($EmailUserID) { # Deal with password changes 
    push @ErrorStack,$Msg_ModEUserEmpty;
  }
  &EndPage(@ErrorStack);

  if ($NewPassword) { 
    srand (time ^ $$ ^ unpack "%32L*", `ps axww`);

    my $Salt = ((0..9,'a'..'z','A'..'Z','.','/')[(int rand (64))]).
               ((0..9,'a'..'z','A'..'Z','.','/')[(int rand (64))]);

    my $EncryptedPassword = crypt($NewPassword,$Salt);
    my $UserUpdate = $dbh -> prepare("update EmailUser set Password=? where EmailUserID=?");
       $UserUpdate -> execute($EncryptedPassword,$EmailUserID);
    print "<b>The User's password was changed. $EmailUserID $EncryptedPassword They should change it again ASAP.</b><p>\n";
  }
} elsif ($Action eq "New") { 
  push @ErrorStack,"You can't create new users here. Do it the normal way.";
} else {
  push @ErrorStack,"No valid action was specified.";
}  

print "<p>\n";

&WarnPage(@WarnStack);
&EndPage(@ErrorStack);

&DocDBNavBar;
&DocDBFooter($DBWebMasterEmail,$DBWebMasterName);
 
exit;
