#! /usr/bin/env perl
#
# Description: Adds downloaded files to the database and filesystem
#
#      Author: Eric Vaandering (ewv@fnal.gov)
#    Modified: 

# Copyright 2001-2006 Eric Vaandering, Lynn Garren, Adam Bryant

#    This file is part of DocDB.

#    DocDB is free software; you can redistribute it and/or modify
#    it under the terms of version 2 of the GNU General Public License 
#    as published by the Free Software Foundation.

#    DocDB is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU General Public License for more details.

#    You should have received a copy of the GNU General Public License
#    along with DocDB; if not, write to the Free Software
#    Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA

use Benchmark;
use CGI;
use DBI;

$StartTime = new Benchmark;

require "DocDBGlobals.pm";
require "ResponseElements.pm";
require "SecuritySQL.pm";
require "RevisionSQL.pm";
require "MiscSQL.pm";

require "FSUtilities.pm";
require "WebUtilities.pm";
require "HTMLUtilities.pm";
require "FileUtilities.pm";
require "Security.pm";

require "RevisionHTML.pm";

$query = new CGI;  # Global for subroutines
$dbh   = DBI -> connect('DBI:mysql:'.$db_name.':'.$db_host,$db_rwuser,$db_rwpass);

&GetSecurityGroups; # FIXME Replace with fetches in right place

### Set up, give user initial information

%params = $query -> Vars;

print $query->header;
&DocDBHeader("$Project File Addition Results","File Addition Results"); 

### Check parameters for errors

@ErrorStack = ();
@WarnStack  = ();

### Get document and revision ID

my $DocumentID = $params{docid};
my $Version    = $params{version};
my $Replace    = $params{replace};
my $MaxFiles   = $params{maxfiles};

my $DocRevID;

### Check for user errors

if ($DocumentID && $Version) {
  $DocRevID = &FetchRevisionByDocumentAndVersion($DocumentID,$Version);
  unless ($DocRevID) {
    push @ErrorStack,"No such document exists.";
  }
  unless (&CanModify($DocumentID,$Version)) {
    push @ErrorStack,"You are not authorized to modify this document.";
  }
} else {
  push @ErrorStack,"You must supply document and version numbers to add files.";
}

my $UpdateLink = $DocumentAddForm."?mode=update&docid=$DocumentID";

# Fill in file hash

my %Files = ();
my $NeedURLs   = 0;
my $AddNewFile = 0;

for (my $i = 1; $i<= $MaxFiles; ++$i) {
  my $Key = $i; # Probably something better later
  if ($params{"upload$i"}) {
    $AddNewFile = 1;
    $Files{$Key}{File} = $query ->  param("upload$i");
    if (&ExistsUpload($DocRevID,$Files{$Key}{File})) {
      if ($Replace) {
        push @WarnStack,"The file $short_file already existed and has been
                         replaced with a new version.";
      } else {
        push @ErrorStack,"The file $short_file already exists.  You may not add
             files with the same file name.<br>
             You probably want to <a href=\"$UpdateLink\">update</a> your
             document,  not add files.";
      }
    }  
  } elsif ($params{"url$i"}) {
    $NeedURLs = 1;
    $AddNewFile = 1;
    $Files{$Key}{URL}  = $params{"url$i"};
    $Files{$Key}{User} = $params{http_user};
    $Files{$Key}{Pass} = $params{http_pass};
    if (&ExistsURL($DocRevID,$Files{$Key}{URL})) {
      if ($Replace) {
        push @WarnStack,"The file $short_file already existed and has been
                          replaced with a new version.";
      } else {
        push @ErrorStack,"The file $short_file already exists. 
         You may not add files with the same file name.<br>
         You probably want to <a href=\"$UpdateLink\">update</a> your document, 
         not add files.";
      }
    }  
  }
  
  if ($params{"main$i"}) {
    $Files{$Key}{Main} = 1;
  } else {
    $Files{$Key}{Main} = 0;
  }          

  $Files{$Key}{Description} = $params{"filedesc$i"};
}

unless ($AddNewFile) {
  push @ErrorStack,"You must supply a file for this document.";
}

# Download HTTP files (generates it's own warnings)
 
if ($NeedURLs) {
  my $TmpDir = &MakeTmpSubDir();
  %Files = &DownloadURLs(-tmpdir => $TmpDir, -files => \%Files);
}  

### Abort if there were errors

EndPage(@ErrorStack);

### Put files in filesystem

$new_dir = &MakeDirectory($DocumentID,$Version);

my @FileIDs = &AddFiles(-docrevid   => $DocRevID, -files => \%Files, 
                        -replaceold => $Replace);

### Touch document

&UpdateRevision(-docrevid => $DocRevID);

### Remove signatures from document if they existed

if ($UseSignoffs) {
  require "SignoffUtilities.pm";
  $Status = &UnsignRevision($DocRevID);
  if ($Status eq "Unsigned") {
    push @WarnStack,"All signatures from the document have been removed.";
  }
}
  
### If we had any warnings print them out now

WarnPage(@WarnStack); @WarnStack = ();

%DocFiles = (); @Files    = (); # Files DB not in sync, clear it

### Output feedback to the user

my $full_docid = FullDocumentID($DocumentID);
   $DocRevID   = FetchRevisionByDocumentAndVersion($DocumentID,$Version);

unless ($DocRevID) {
  print "This document does not exist.<p>\n";
  exit;
  print $query->end_html;
}

print "You were successful in adding files. Your entry now contains
       the following information: <p>\n"; 

PrintRevisionInfo($DocRevID);

if ($MailInstalled) {
  require "MailNotification.pm";
  MailNotices(-docrevid => $DocRevID, -type => "addfiles");
}

if ($MailInstalled && $UseSignoffs) { 
  ClearSignatures(); 
  NotifySignees($DocRevID);
}

$EndTime  = new Benchmark;

DocDBNavBar();
DocDBFooter($DBWebMasterEmail,$DBWebMasterName);
