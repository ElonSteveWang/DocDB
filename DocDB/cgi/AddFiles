#! /usr/bin/env perl
#
# Description: Adds downloaded files to the database and filesystem
#
#      Author: Eric Vaandering (ewv@fnal.gov)
#    Modified: 

# Copyright 2001-2004 Eric Vaandering, Lynn Garren, Adam Bryant

#    This file is part of DocDB.

#    DocDB is free software; you can redistribute it and/or modify
#    it under the terms of version 2 of the GNU General Public License 
#    as published by the Free Software Foundation.

#    DocDB is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU General Public License for more details.

#    You should have received a copy of the GNU General Public License
#    along with DocDB; if not, write to the Free Software
#    Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA

use Benchmark;
use CGI;
use DBI;

$StartTime = new Benchmark;

require "DocDBGlobals.pm";
require "ResponseElements.pm";
require "SecuritySQL.pm";
require "RevisionSQL.pm";
require "MiscSQL.pm";
require "FSUtilities.pm";
require "WebUtilities.pm";
require "HTMLUtilities.pm";
require "Security.pm";

require "RevisionHTML.pm";

$query = new CGI;  # Global for subroutines
$dbh   = DBI -> connect('DBI:mysql:'.$db_name.':'.$db_host,$db_rwuser,$db_rwpass);

&GetSecurityGroups; # FIXME Replace with fetches in right place

### Set up, give user initial information

%params = $query -> Vars;

print $query->header;
&DocDBHeader("$Project File Addition Results","File Addition Results"); 

### Check parameters for errors

@ErrorStack = ();
@WarnStack  = ();

### Get document and revision ID

my ($sec,$min,$hour,$day,$mon,$year) = localtime(time); 
++$mon; $year += 1900; 
$SQL_NOW       = "$year-$mon-$day $hour:$min:$sec";

my $DocumentID = $params{docid};
my $Version    = $params{version};
my $Replace    = $params{replace};
my $DocRevID;

### Check for user errors

if ($DocumentID && $Version) {
  $DocRevID = &FetchRevisionByDocumentAndVersion($DocumentID,$Version);
  unless ($DocRevID) {
    push @ErrorStack,"No such document exists.";
  }
  unless (&CanModify($DocumentID,$Version)) {
    push @ErrorStack,"You are not authorized to modify this document.";
  }
} else {
  push @ErrorStack,"You must supply document and version numbers to add files.";
}

my $UpdateLink = $DocumentAddForm."?mode=update&docid=$DocumentID";

# FIXME: Is the user authorized to make changes to this document

unless ($params{single_upload} || $params{single_http}) {
  push @ErrorStack,"You must supply a file for this document.";
}
if     ($params{single_upload} && $params{single_http}) {
  push @ErrorStack,"You may not specify both URL and file upload.";
}

### Do the files to be added already exist?

if ($params{single_upload}) {
  my @short_files   = $query -> param("single_upload");
  foreach my $short_file (@short_files) {
    if (&ExistsUpload($DocRevID,$short_file)) {
      if ($Replace) {
        push @WarnStack,"The file $short_file already existed and has been
                          replaced with a new version.";
      } else {
        push @ErrorStack,"The file $short_file already exists. 
         You may not add files with the same file name.<br>
         You probably want to <a href=\"$UpdateLink\">update</a> your document, 
         not add files.";
      }
    }  
  }
}

### If they are URLs, do they exist, not dupes, etc.

if ($params{single_http}) {
  if ($params{http_user} && $params{http_pass}) {
    $Authentication = " --http-user $params{http_user} --http-pass $params{http_pass} ";
  } else {
    $Authentication = "";
  }  
  my @urls = split /\0/,$params{single_http};
  foreach my $url (@urls) {
    if (&ExistsURL($DocRevID,$url)) {
      if ($Replace) {
        push @WarnStack,"The file $short_file already existed and has been
                          replaced with a new version.";
      } else {
        push @ErrorStack,"The file $short_file already exists. 
         You may not add files with the same file name.<br>
         You probably want to <a href=\"$UpdateLink\">update</a> your document, 
         not add files.";
      }
    }  
    if (&ValidFileURL($url)) {
      my $command = $Wget.$Authentication.$url;
      my @url_lines = `$command`;  # FIXME: avoid fetching twice 
      unless (@url_lines) {
        push @ErrorStack,"The URL <tt>$url</tt> was not present or was protected.";
      }
    } else {
      push @ErrorStack,"The URL <tt>$url</tt> is not well formed. Don't forget ".
                        "http:// on the front and a file name after the last /.";
    }
  }  
}  

### Abort if there were errors

if ((@ErrorStack)) {  # The user made one or more mistakes, warn and exit
  &EndPage(@ErrorStack);
}

### Put files in filesystem

$new_dir = &MakeDirectory($DocumentID,$Version);

@Descriptions = split ("\0",$params{filedesc});
@Roots = ();
my @RawRoots = split ("\0",$params{root});
foreach my $RawRoot (@RawRoots) {  # Simulate what I thought was happening
  @Roots[$RawRoot-1] = "on"        # with roots
}  

if ($params{single_upload}) { # Copy file to directory
  @short_files   = $query ->  param("single_upload");
  foreach $short_file (@short_files) {
    my $status = &ProcessUpload($new_dir,$short_file);
  }
} elsif ($params{single_http}) {
  @urls = split /\0/,$params{single_http};
  @short_files = ();
  foreach $url (@urls) {
    $short_file = &ProcessURL($new_dir,$url);
    push @short_files,$short_file;
  }  
}

### Insert into Files database

foreach $short_file (@short_files) {
  my $file_insert = $dbh->prepare(
     "insert into DocumentFile ".
     "       (DocFileID, DocRevID, FileName, Date, RootFile, Description) ".
     "values (0,         ?,        ?,        ?,    ?       , ?)");
  my $file_update = $dbh->prepare(
     "update DocumentFile set Date=?,RootFile=?,Description=? ".
     "where DocRevID=? and FileName=?");

  my $Description = shift @Descriptions;
  my $RootFile = shift @Roots;
  if ($RootFile eq "on") {
    $RootFile = 1;
  } else {
    $RootFile = 0;
  }
  if (&ExistsUpload($DocRevID,$short_file)) {
    $file_update -> execute($SQL_NOW,$RootFile,$Description,$DocRevID,$short_file);
  } else {   
    $file_insert -> execute($DocRevID,$short_file,$SQL_NOW,$RootFile,$Description);
  }
}

### Remove signatures from document if they existed

if ($UseSignoffs) {
  require "SignoffUtilities.pm";
  $Status = &UnsignRevision($DocRevID);
  if ($Status eq "Unsigned") {
    push @WarnStack,"All signatures from the document have been removed.";
  }
}
  
### If we had any warnings print them out now

if (@WarnStack) {
  &WarnPage(@WarnStack);
  @WarnStack = ();
}

%DocFiles = (); @Files    = (); # Files DB not in sync, clear it

### Output feedback to the user

my $full_docid = &FullDocumentID($DocumentID);
   $DocRevID   = &FetchRevisionByDocumentAndVersion($DocumentID,$Version);

unless ($DocRevID) {
  print "This document does not exist.<p>\n";
  exit;
  print $query->end_html;
}

print "You were successful in adding files. Your entry now contains
       the following information: <p>\n"; 

&PrintRevisionInfo($DocRevID);

if ($MailInstalled && $UseSignoffs) { 
  &ClearSignatures; 
  &NotifySignees($DocRevID);
}

$EndTime  = new Benchmark;

&DocDBNavBar();
&DocDBFooter($DBWebMasterEmail,$DBWebMasterName);
