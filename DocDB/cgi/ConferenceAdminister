#! /usr/bin/env perl
#
#        Name: ConferenceAdminister 
# Description: This script is called by EmailAdministerForm and does 
#              administration on conferences. Since conferences are special
#              types of topics, some things can be changed with TopicAdminister
#              but some can only be changed here. Best to just use 
#              ConferenceAdminister.
#
#      Author: Eric Vaandering (ewv@fnal.gov)
#    Modified: 
#

use CGI;
use DBI;
use Time::Local;

require "DocDBGlobals.pm";
require "ResponseElements.pm";
require "Security.pm";
require "HTMLUtilities.pm";
require "TopicSQL.pm";
require "MiscSQL.pm";
require "WebUtilities.pm";
require "Messages.pm";

$query = new CGI;  # Global for subroutines

print $query->header;
&DocDBHeader("Modified Conferences");

%params = $query -> Vars;

@ErrorStack = ();
@WarnStack  = ();

# Parameters to script 

my $Password      = $params{password};
my $Username      = $params{admuser};
my $Action        = $params{admaction};

my $TopicID       = $params{conftopic};
my $MajorTopicID  = $params{majortopic};
my $LongName      = $params{long};
my $ShortName     = $params{short};
my $Location      = $params{location};
my $URL           = $params{url};

my $StartDay      = $params{startday};
my $StartMonth    = $params{startmonth};
my $StartYear     = $params{startyear};
my $EndDay        = $params{endday};
my $EndMonth      = $params{endmonth};
my $EndYear       = $params{endyear};

my $StartDate = "$StartYear-$ReverseAbrvMonth{$StartMonth}-$StartDay";
my $EndDate   = "$EndYear-$ReverseAbrvMonth{$EndMonth}-$EndDay";

my $StartTime = timelocal(0,0,0,$StartDay,$ReverseAbrvMonth{$StartMonth}-1,$StartYear);
my $EndTime   = timelocal(0,0,0,$EndDay,$ReverseAbrvMonth{$EndMonth}-1,$EndYear);

unless ($dbh) {
  push @ErrorStack,$Msg_AdminNoConnect;
}         
&EndPage(@ErrorStack);

unless (&CanAdminister) {
  push @ErrorStack,$Msg_AdminNoLogin;
}  
&EndPage(@ErrorStack);

&SpecialMajorTopics;
&GetConferences;

if ($Action eq "Delete") { 
  unless ($TopicID) {
    push @ErrorStack,$Msg_ModConfEmpty;
  }
  &EndPage(@ErrorStack);
  my $TopicLink   = &MinorTopicLink($TopicID);
  my @TopicDocIDs = &GetTopicDocuments($TopicID);
  
# Delete TopicID from Topic, Conference, RevisionTopic tables
  
  my $TopicDelete      = $dbh -> prepare("delete from MinorTopic    where MinorTopicID=?");
  my $ConferenceDelete = $dbh -> prepare("delete from Conference    where MinorTopicID=?");
  my $RevisionDelete   = $dbh -> prepare("delete from RevisionTopic where MinorTopicID=?");
  $TopicDelete      -> execute($TopicID);
  $ConferenceDelete -> execute($TopicID);
  $RevisionDelete   -> execute($TopicID);
  
  print "$TopicLink has been removed from the database.<br>\n";
  if (@TopicDocIDs) {
    push @WarnStack,"$TopicLink was a topic on some documents. These
                     entries have been removed.";
  }  
} elsif ($Action eq "Modify") { 
  unless ($TopicID) {
    push @ErrorStack,$Msg_ModConfEmpty;
  }
  &EndPage(@ErrorStack);

# Deal with name changes     

  if ($ShortName) { 
    print "<b>Updating short conference name.</b><br>\n";
    my $TopicUpdate = $dbh->prepare(
       "update MinorTopic set ShortDescription=? where MinorTopicID=?");
    $TopicUpdate -> execute($ShortName,$TopicID);
  }
  if ($LongName) { 
    print "<b>Updating long conference name.</b><br>\n";
    my $TopicUpdate = $dbh->prepare(
       "update MinorTopic set LongDescription=? where MinorTopicID=?");
    $TopicUpdate -> execute($LongName,$TopicID);
  }

# For backwards compatability, the row in the conferences table may not exist
# so check and create it if it doesn't

  my (undef,undef,undef,$Day,$Month,$Year) = localtime(time); 
  $Year += 1900;

  if ($Location || $URL || 
      $Day != $StartDay || $AbrvMonths[$Month] ne $StartMonth || $Year != $StartYear ||
      $Day != $EndDay || $AbrvMonths[$Month] ne $EndMonth || $Year != $EndYear) {
    unless (&FetchConferenceByTopicID($TopicID)) {
      print "<b>Creating new Meeting/Conference entry for this topic.</b><br>\n";
      my $ConferenceInsert = $dbh->prepare(
         "insert into Conference (ConferenceID,MinorTopicID) values (0,?)");
      $ConferenceInsert -> execute($TopicID);
    }
  }    

# Deal with location, URL changes
      
  if ($Location) {
    print "<b>Updating conference location.</b><br>\n";
    my $ConferenceUpdate = $dbh->prepare(
       "update Conference set Location=? where MinorTopicID=?");
    $ConferenceUpdate -> execute($Location,$TopicID);
  }
  if ($URL) {
    print "<b>Updating conference URL.</b><br>\n";
    my $ConferenceUpdate = $dbh->prepare(
       "update Conference set URL=? where MinorTopicID=?");
    $ConferenceUpdate -> execute($URL,$TopicID);
  }
  
# Deal with date changes

  if ($Day != $StartDay || $AbrvMonths[$Month] ne $StartMonth || $Year != $StartYear) {
    print "<b>Updating conference starting date.</b><br>\n";
    my $StartDate = "$StartYear-$ReverseAbrvMonth{$StartMonth}-$StartDay";
    my $ConferenceUpdate = $dbh->prepare(
       "update Conference set StartDate=? where MinorTopicID=?");
    $ConferenceUpdate -> execute($StartDate,$TopicID);
  }
  if ($Day != $EndDay || $AbrvMonths[$Month] ne $EndMonth || $Year != $EndYear) {
    print "<b>Updating conference ending date.</b><br>\n";
    my $EndDate = "$EndYear-$ReverseAbrvMonth{$EndMonth}-$EndDay";
    my $ConferenceUpdate = $dbh->prepare(
       "update Conference set EndDate=? where MinorTopicID=?");
    $ConferenceUpdate -> execute($EndDate,$TopicID);
  }

} elsif ($Action eq "New") { # FIXME: Allow conference add for completeness
  # Check inputs

  unless ($ShortName && $LongName && $Location) {
    push @ErrorStack,"You must fill in all the fields.";
  }

  if ($URL) {
    unless (&ValidURL($URL)) {
      push @ErrorStack,"The URL $URL is not valid.";
    }
  } else {
    push @WarnStack,"No URL was supplied for this conference. If this was a
    mistake, do not re-enter the conference. Contact an adminstrator.";
  }  

  unless ($EndTime && &ValidDate($EndDay,$ReverseAbrvMonth{$EndMonth},$EndYear)) {
    push @ErrorStack,"The ending date is not valid.";
  }

  unless ($StartTime && &ValidDate($StartDay,$ReverseAbrvMonth{$StartMonth},$StartYear)) {
    push @ErrorStack,"The starting date is not valid.";
  }

  if ($StartTime > $EndTime) {
    push @ErrorStack,"The starting date is after the ending date.";
  }

  unless ($MajorTopicID) {
    push @ErrorStack,"You must select one of the major topics.";
  }

  &EndPage(@ErrorStack);

  my $TopicInsert = $dbh->prepare(
   "insert into MinorTopic ".
          "(MinorTopicID, MajorTopicID, ShortDescription, LongDescription) ". 
   "values (0,            ?,            ?,                ?)");

  my $ConferenceInsert = $dbh->prepare(
   "insert into Conference ".
          "(ConferenceID, MinorTopicID, Location, URL, StartDate, EndDate) ". 
   "values (0,            ?,            ?,        ?,   ?,         ?)");

  $TopicInsert -> execute($MajorTopicID,$ShortName,$LongName);
  my $MinorTopicID = $TopicInsert -> {mysql_insertid}; # Works with MySQL only
  if ($MinorTopicID) {
    $ConferenceInsert -> execute($MinorTopicID,$Location,$URL,
                                 $StartDate,$EndDate); 
  }

} else {
  push @ErrorStack,"No valid action was specified.";
}  

# For modify or new fetch information and display.

if ($Action eq "Modify") {
  &GetTopics;
  &GetConferences;

  print "<p><b>Here are the results of your modification:<br>\n";
  my $ShortLink = &MinorTopicLink($TopicID,"short");
  my $LongLink = &MinorTopicLink($TopicID,"long");
  my $Start = &EuroDate($Conferences{$TopicID}{StartDate});
  my $End   = &EuroDate($Conferences{$TopicID}{EndDate});
  my $Link;
  if ($Conferences{$TopicID}{URL}) {
    $Link = "<a href=\"$Conferences{$TopicID}{URL}\">$Conferences{$TopicID}{URL}</a>";
  } else {
    $Link = "None entered\n";
  }
  print "Short description: $ShortLink<br>\n";
  print "Long description: $LongLink<br>\n";
  print "Location: $Conferences{$TopicID}{Location}<br>\n";
  print "Start date: $Start<br>\n";
  print "End date: $End<br>\n";
  print "URL: $Link<br>\n";
  print "</b><p>\n";
}  

print "<p>\n";

&WarnPage(@WarnStack);
&EndPage(@ErrorStack);

&DocDBNavBar;
&DocDBFooter($DBWebMasterEmail,$DBWebMasterName);
 
exit;
