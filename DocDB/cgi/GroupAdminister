#! /usr/bin/env perl
#
#        Name: GroupAdminister 
# Description: This script is called by GroupAdministerForm and does 
#              administration on Groups in the DB. This script adds, modifies 
#              and deletes groups. It also displays all the groups and their
#              relationships since this can be difficult to understand. 
#
#      Author: Eric Vaandering (ewv@fnal.gov)
#    Modified: 
#

use CGI;
use DBI;

require "DocDBGlobals.pm";
require "ResponseElements.pm";
require "Security.pm";
require "HTMLUtilities.pm";
require "SecuritySQL.pm";
require "GroupHTML.pm";
require "Messages.pm";

$query = new CGI;  # Global for subroutines

print $query->header;
&DocDBHeader("Modified Groups");

%params = $query -> Vars;

@ErrorStack = ();
@WarnStack  = ();

# Parameters to script 

my $Password      = $params{password};
my $Username      = $Administrator;
my $Action        = $params{admaction};

my $Description = $params{description};
my $Name        = $params{name};
my $ParentID    = $params{parent};
my @ChildIDs    = split /\0/,$params{child};
my $Create      = $params{create};
my $Admin       = $params{admin};
my $NoPerm      = $params{remove};

if ($Create) {$Create = 1;} # Make sure they are in format MySQL is expecting
if ($Admin)  {$Admin  = 1;}
if ($NoPerm) {$NoPerm = 1;}

unless (&CanAdminister) {
  push @ErrorStack,$Msg_AdminNoLogin;
}  
&EndPage(@ErrorStack);

$dbh   = DBI->connect('DBI:mysql:'.$db_name.':'.$db_host,$Username,$Password);

unless ($dbh) {
  push @ErrorStack,$Msg_AdminNoConnect;
}         
&EndPage(@ErrorStack);

&GetSecurityGroups;

if      ($Action eq "Delete") { # Delete institutions
  if (!$ParentID) {
    push @ErrorStack,$Msg_ModGroupEmpty;
  } elsif (!$SecurityGroups{$ParentID}{TIMESTAMP}) {
    push @ErrorStack,$Msg_ModGroupNone;
  } else {
    my $GroupDelete       = $dbh -> prepare("delete from SecurityGroup    where GroupID=?");
    my $RevSecurityDelete = $dbh -> prepare("delete from RevisionSecurity where GroupID=?");
    my $HierarchyDelete   = $dbh -> prepare("delete from GroupHierarchy   ".
                                    "where ParentID=? or ChildID=?");
    $GroupDelete       -> execute($ParentID);
    $RevSecurityDelete -> execute($ParentID);
    $HierarchyDelete   -> execute($ParentID,$ParentID);
    print "<b>$SecurityGroups{$ParentID}{NAME} has been deleted.</b><br>\n";
  }
} elsif ($Action eq "Modify") { # Modify institutions
  unless (ParentID) {
    push @ErrorStack,$Msg_ModGroupEmpty;
  }
  &EndPage(@ErrorStack);

# Deal with name changes     

  if ($Name) { 
    print "<b>Updating group name.</b><br>\n";
    my $GroupUpdate = $dbh->prepare(
       "update SecurityGroup set Name=? where GroupID=?");
    $GroupUpdate -> execute($Name,$ParentID);
  }
  if ($Description) { 
    print "<b>Updating group description.</b><br>\n";
    my $GroupUpdate = $dbh->prepare(
       "update SecurityGroup set Description=? where GroupID=?");
    $GroupUpdate -> execute($Description,$ParentID);
  }

# Update parent child relationships. Delete the old and add new relationships

  if (@ChildIDs) {
    print "<b>Deleting all subordinates.</b><br>\n";
    my $HierarchyDelete = $dbh -> prepare("delete from GroupHierarchy   ".
                                    "where ParentID=? or ChildID=?");
       $HierarchyDelete -> execute($ParentID,$ParentID);

    my $HierarchyInsert = $dbh->prepare(
     "insert into GroupHierarchy (HierarchyID,ChildID,ParentID) ".
                         "values (0,?,?)");
    foreach my $ChildID (@ChildIDs) {
      if ($ChildID && $ChildID != $ParentID) {
        print "<b>Adding subordinate.</b><br>\n";
        $HierarchyInsert -> execute($ChildID,$ParentID);
      }
    }     
  }

# Update permissions # FIXME add CanAdmin
  
  if ($NoPerm) {
    my $GroupUpdate = $dbh->prepare(
       "update SecurityGroup set CanCreate=0 where GroupID=?");
    $GroupUpdate -> execute($ParentID);
  }  
  if ($Create) {
    my $GroupUpdate = $dbh->prepare(
       "update SecurityGroup set CanCreate=1 where GroupID=?");
    $GroupUpdate -> execute($ParentID);
  }  
     
} elsif ($Action eq "New") { # Create new groups
  print "<b>Adding a new group.</b><br>\n";
  my $GroupInsert = $dbh->prepare(
   "insert into SecurityGroup (GroupID,Name,Description,CanCreate) ".
                      "values (0,?,?,?)");

  $GroupInsert -> execute($Name,$Description,$Create);
  $ParentID = $GroupInsert -> {mysql_insertid}; # Works with MySQL only

  my $HierarchyInsert = $dbh->prepare(
   "insert into GroupHierarchy (HierarchyID,ChildID,ParentID) ".
                       "values (0,?,?)");
  foreach my $ChildID (@ChildIDs) {
    if ($ChildID) {
      $HierarchyInsert -> execute($ChildID,$ParentID);
    }
  }     
} else {
  push @ErrorStack,"No valid action was specified.";
}  

# For modify or new fetch institution information and display.

if ($Action eq "Modify" || $Action eq "New") {
#  &FetchInstitution($InstitutionID);
  &GetSecurityGroups($ParentID);
  print "<p><b>Here are the results of your modification:<br>\n";
  print "<table cellpadding=10>\n";
  print "<tr valign=top>\n";
  print "<td><b>$SecurityGroups{$ParentID}{NAME}</b><br>($SecurityGroups{$ParentID}{DESCRIPTION})</td>\n";
  print "<td>\n";
  print "Dominant groups:\n";
  &PrintGroupParents($ParentID);
  print "</td>\n";
  print "<td>\n";
  print "Subordinate groups:\n";
  &PrintGroupChildren($ParentID);
  print "</td>\n";
  print "<td>\n";
  print "Permissions:\n";
  &PrintGroupPermissions($ParentID);
  print "</td>\n";
  print "</tr>\n";
  print "</table>\n";
  print "</b><p>\n";
}  

print "<p>\n";

&WarnPage(@WarnStack);
&EndPage(@ErrorStack);

&DocDBNavBar;
&DocDBFooter($DBWebMasterEmail,$DBWebMasterName);
 
exit;
