#! /usr/bin/env perl
#
#        Name: EmailAdministerForm
# Description: This script provides a form to administer users receiving
#              e-mail notifications and shows the complete list of who is
#              receiving what.
#
#      Author: Eric Vaandering (ewv@fnal.gov)
#    Modified: 
#

# Copyright 2001-2004 Eric Vaandering, Lynn Garren, Adam Bryant

#    This file is part of DocDB.

#    DocDB is free software; you can redistribute it and/or modify
#    it under the terms of version 2 of the GNU General Public License 
#    as published by the Free Software Foundation.

#    DocDB is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU General Public License for more details.

#    You should have received a copy of the GNU General Public License
#    along with DocDB; if not, write to the Free Software
#    Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA

use CGI;                                                                                      
use DBI;

require "DocDBGlobals.pm";
require "Scripts.pm";
require "ResponseElements.pm";
require "Security.pm";
require "HTMLUtilities.pm";
require "AdministerElements.pm";
require "SecurityHTML.pm";

require "MailNotification.pm";
require "SecuritySQL.pm";
require "NotificationSQL.pm";

$query = new CGI;  # Global for subroutines
$dbh   = DBI -> connect('DBI:mysql:'.$db_name.':'.$db_host,$db_rouser,$db_ropass);

&GetSecurityGroups;

print $query->header;
&DocDBHeader("User Administration"); 

&HelpPopupScript;

@ErrorStack = ();
@WarnStack  = ();

unless (&CanAdminister()) {
  push @ErrorStack,"You are not allowed to access administrative functions.";
  push @WarnStack,"I've disabled admin checking in this page. FIX IT.";
  push @WarnStack,"Have to add help links here and for request";
}

&EndPage(@ErrorStack);
&WarnPage(@WarnStack);

print "<b>This form allows you to administer personal accounts.</b><p>\n"; 

print "Since users can modify their own data and create their own accounts,
       the only functions you can perform here are to reset the user's password
       and delete a user. The full list of users receiving notifications and 
       their preferences are shown below for your reference.<p>\n";

### Email User Modification

print $query -> start_multipart_form('POST',"$EmailAdminister");
print "<table cellpadding=10>\n";
print "<tr valign=top>\n";
print "<td colspan=3>\n"; &AdministerActions;      print "</td>\n";
print "</tr>\n";

print "<tr valign=top>\n";
print "<td rowspan=5>\n"; &EmailUserSelect; print "</td>\n";  
print "<td>\n";   
print "<b><a ";
&HelpLink("resetpassword");
print "New Password:</a></b><br> \n";
print $query -> textfield (-name => 'resetpw', -size => 20, -maxlength => 20);
print "</td>\n";
print "<td rowspan=5>\n"; 
&SecurityList(-helplink => 'usergroups', -helptext => 'User\'s Groups', -name => 'usergroups'); 
print "</td>\n";  
print "</tr>\n";

print "<tr><td>\n";
print $query -> checkbox(-name  => "verifyuser", -label => 'Verify User');
print "</td></tr>\n";
print "<tr><td>\n";
print $query -> checkbox(-name  => "usersign", -label => 'User Can Sign Docs');
print "</td></tr>\n";
print "<tr><td>\n";
print $query -> checkbox(-name  => "clearuser", -label => 'Clear Verify and Sign');
print "</td></tr>\n";
print "<tr><td>\n";
print $query -> checkbox(-name  => "cleargroups", -label => 'Clear User\'s Groups');
print "</td></tr>\n";

print "<tr valign=top>\n";
print "<td colspan=3>\n";
&AdministratorPassword;
print "&nbsp;";
print $query -> submit (-value => "Modify Personal Account");
print "</td>\n";
print "</tr>\n";

print "</table>\n";
print $query -> end_multipart_form;

print "<p>\n";
print "<b>The users who receive e-mail and when are shown below:</b><p>\n";
print "<p><hr>\n";

### Display of existing groups

my @EmailUserIDs = &GetEmailUserIDs;

print "<table cellpadding=3>\n";
foreach my $EmailUserID (@EmailUserIDs) {
  &FetchEmailUser($EmailUserID);  
  print "<tr valign=top>\n";
  print "<td>\n";

  print "<table>\n";
  print "<tr>\n";
  print "<th>Username:</th><td>$EmailUser{$EmailUserID}{Username}<br>\n"; 
  print "</td>\n";
  print "</tr>\n";
  print "<tr>\n";
  print "<th>Name:</th><td>$EmailUser{$EmailUserID}{Name}<br>\n"; 
  print "</td>\n";
  print "</tr>\n";
  print "<tr valign=top>\n";
  print "<th>E-mail:</th><td>$EmailUser{$EmailUserID}{EmailAddress}<br>\n"; 
  print "</td>\n";
  print "</tr>\n";
  print "<tr valign=top>\n";
  print "<th>Verified:</th>";
  print "<td>".("No","Yes")[$EmailUser{$EmailUserID}{Verified}]."<br>\n"; 
  print "</td>\n";
  print "</tr>\n";
  print "<tr valign=top>\n";
  print "<th>HTML:</th>";
  print "<td>".("No","Yes")[$EmailUser{$EmailUserID}{PreferHTML}]."<br>\n"; 
  print "</td>\n";
  print "</tr>\n";
  print "<tr valign=top>\n";
  print "<th>Can Sign:</th>";
  print "<td>".("No","Yes")[$EmailUser{$EmailUserID}{CanSign}]."<br>\n"; 
  print "</td>\n";
  print "</tr>\n";
  print "<tr valign=top>\n";
  
  # Groups user belongs (or wants to belong to)
  
  print "<th>Groups:</th>";
  print "<td><ul>\n"; 
  my @UserGroupIDs = &FetchUserGroupIDs($EmailUserID);
  foreach my $UserGroupID (@UserGroupIDs) {
    &FetchSecurityGroup($UserGroupID);
    print "<li>$SecurityGroups{$UserGroupID}{NAME}</li>";
  }   
  print "</ul></td>\n";
  print "</tr>\n";
  print "</table>\n";
  print "</td>\n";

  print "<td>\n";
  &DisplayNotification($EmailUserID,"Immediate");
  print "</td>\n";

  print "<td>\n";
  &DisplayNotification($EmailUserID,"Daily");
  print "</td>\n";

  print "<td>\n";
  &DisplayNotification($EmailUserID,"Weekly");
  print "</td>\n"; 

  print "</tr>\n";
  print "<tr><td colspan=5><hr width=\"95%\"></td></tr>\n";
} 
print "</table>\n";

print "<p><hr><p>\n";

&DocDBNavBar();
&DocDBFooter($DBWebMasterEmail,$DBWebMasterName);
