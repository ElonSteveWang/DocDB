#! /usr/bin/env perl
#
# Author Eric Vaandering (ewv@fnal.gov)
#
# Right now this is pretty primative, but what do you expect when we have one
# publication in the DB.

# First thing to fix is to display reasonable fields. 

# Later on, we should provide stuff more like hep-ex, with links to 
# publisher's sites, select by publication or year, BibTex, etc.

# Copyright 2001-2005 Eric Vaandering, Lynn Garren, Adam Bryant

#    This file is part of DocDB.

#    DocDB is free software; you can redistribute it and/or modify
#    it under the terms of version 2 of the GNU General Public License 
#    as published by the Free Software Foundation.

#    DocDB is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU General Public License for more details.

#    You should have received a copy of the GNU General Public License
#    along with DocDB; if not, write to the Free Software
#    Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA


use Benchmark;
use CGI;
use DBI;

$StartTime = new Benchmark;

require "DocDBGlobals.pm";
require "ResponseElements.pm";

require "MiscSQL.pm";
require "DocumentSQL.pm";
require "RevisionSQL.pm";
require "SecuritySQL.pm";

require "HTMLUtilities.pm";
require "Security.pm";
require "Sorts.pm";

$query = new CGI;  # Global for subroutines

%params = $query -> Vars;

my $TypeID = $params{typeid};

$dbh   = DBI->connect('DBI:mysql:'.$db_name.':'.$db_host,$db_rouser,$db_ropass);

&GetSecurityGroups;

### Start HTML

print $query->header;
&DocDBHeader("$Project Publications");


print "<center><h4>These publications are available:</h4></center><p>\n";

my $document_list = $dbh -> prepare(
   "select DocumentID from DocumentRevision,RevisionReference ".
   "where DocumentRevision.DocRevID=RevisionReference.DocRevID and RevisionReference.JournalID>0"); 

my $DocumentID;

### Get all documents with this type

my %DocumentIDs = ();
$document_list -> execute();
$document_list -> bind_columns(undef, \($DocumentID));

while ($document_list -> fetch) {
  $DocumentIDs{$DocumentID} = 1; # Hash removes duplicates
}

### Get list of documents and read in the information we need from database

my @DocumentIDs = keys %DocumentIDs;

foreach my $DocumentID (@DocumentIDs) { # For shorter lists
  &FetchDocument($DocumentID);
  &FetchRevisionByDocumentAndVersion($DocumentID,$Documents{$DocumentID}{NVersions});
}

### Sort

### FIXME: More generic way of selecting fields to sort on

@DocumentIDs = reverse sort DocumentByRevisionDate @DocumentIDs;  

### Print summary information

print "<center><table cellpadding=3>\n";

### FIXME: More generic way of selecting fields to display

&DocumentSummary(0); # Force table headers
my $NumDoc = 0;

foreach $DocumentID (@DocumentIDs) {
  unless ($DocumentID) {next;}
  $Version = &LastAccess($DocumentID);
  if ($Version == -1) {next;}
  &DocumentSummary($DocumentID,$Mode,$Version);
  ++$NumDoc;
}

print "</table></center>\n";
print "<p>\n";

### Statistics

print "<p><b>Number of documents found: $NumDoc</b><p>\n";

$EndTime  = new Benchmark;

&DocDBNavBar();
&DocDBFooter($DBWebMasterEmail,$DBWebMasterName);
