#! /usr/bin/env perl
#
#        Name: MeetingModify
# Description: Modify sessions of meeting the shell of a meeting. Calls itself
#
#      Author: Eric Vaandering (ewv@fnal.gov)
#    Modified: 

# Copyright 2001-2005 Eric Vaandering, Lynn Garren, Adam Bryant

#    This file is part of DocDB.

#    DocDB is free software; you can redistribute it and/or modify
#    it under the terms of version 2 of the GNU General Public License 
#    as published by the Free Software Foundation.

#    DocDB is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU General Public License for more details.

#    You should have received a copy of the GNU General Public License
#    along with DocDB; if not, write to the Free Software
#    Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA

use CGI qw(-nosticky);
use DBI;
use Time::Local;

require "DocDBGlobals.pm";
require "Messages.pm";

require "HTMLUtilities.pm";
require "ResponseElements.pm";
require "FormElements.pm";
require "Sorts.pm";
require "Scripts.pm";
require "Security.pm";

require "MeetingHTML.pm";
require "SecurityHTML.pm";
require "MeetingSQL.pm";
require "MeetingSecuritySQL.pm";
require "MeetingSecurityUtilities.pm";
require "TopicSQL.pm";
require "WebUtilities.pm";

$query = new CGI;  # Global for subroutines

%params = $query -> Vars;

my $Mode               = $params{mode};

my $EventGroupID       = $params{eventgroups};
my $Short              = $params{shortdesc};
my $Long               = $params{long};

my $ConferenceID       = $params{conferenceid};

my $StartYear          = $params{startyear};
my $StartMonth         = $params{startmonth};
my $StartDay           = $params{startday};
my $EndYear            = $params{endyear};
my $EndMonth           = $params{endmonth};
my $EndDay             = $params{endday};
my $MeetPreamble       = $params{meetpreamble};
my $MeetEpilogue       = $params{meetepilogue};
my $Location           = $params{location};
my $URL                = $params{url};
my $ShowAllTalks       = $params{meetshowall};

my @MeetingViewGroupIDs   = split /\0/,$params{meetingviewgroups};
my @MeetingModifyGroupIDs = split /\0/,$params{meetingmodifygroups};

my @SessionYears         = split /\0/,$params{sessionyear};
my @SessionMonths        = split /\0/,$params{sessionmonth};
my @SessionDays          = split /\0/,$params{sessionday};
my @SessionHours         = split /\0/,$params{sessionhour};
my @SessionOrders        = split /\0/,$params{sessionorder};
my @RawSessionSeparators = split /\0/,$params{sessionseparator};
my @SessionLocations     = split /\0/,$params{sessionlocation};
my @SessionTitles        = split /\0/,$params{sessiontitle};
my @SessionDescriptions  = split /\0/,$params{sessiondescription};
my @MeetingOrderIDs      = split /\0/,$params{meetingorderid};
my @SessionDeletes       = split /\0/,$params{sessiondelete};

my $StartDate = "$StartYear-$ReverseAbrvMonth{$StartMonth}-$StartDay";
my $EndDate   = "$EndYear-$ReverseAbrvMonth{$EndMonth}-$EndDay";

my ($StartTime,$EndTime);

my %RequiredEntries = ();
   $RequiredEntries{StartDate}        = $TRUE;
   $RequiredEntries{EndDate}          = $TRUE;
   $RequiredEntries{LongDescription}  = $TRUE;
   $RequiredEntries{ShortDescription} = $TRUE;
   $RequiredEntries{EventGroup}       = $TRUE;
   
if ($StartDay && $StartMonth && $StartYear) {
  $StartTime = timelocal(0,0,0,$StartDay,$ReverseAbrvMonth{$StartMonth}-1,$StartYear);
}
   
if ($EndDay && $EndMonth && $EndYear) {
  $EndTime   = timelocal(0,0,0,$EndDay,$ReverseAbrvMonth{$EndMonth}-1,$EndYear);
}

if ($ShowAllTalks) {$ShowAllTalks = 1;}

if ($ConferenceID || $Mode) {
  $SetMode = "modify";
} else {
  $SetMode = "create";
}    

@ErrorStack = ();
@WarnStack  = ();

$dbh   = DBI -> connect('DBI:mysql:'.$db_name.':'.$db_host,$db_rwuser,$db_rwpass);

unless ($dbh) {
  push @ErrorStack,$Msg_NoConnect;
}         

print $query->header;
if ($SetMode eq "create") {
  &DocDBHeader("Create a New Event","",-scripts => ["PopUps"]);
} else {
  &DocDBHeader("Modify an Event","",-scripts => ["PopUps"]);
}
  
&EndPage(@ErrorStack);

# Security checks

unless (&CanCreateMeeting()) {
  push @ErrorStack,$Msg_MeetNoCreate;
}
if ($ConferenceID && !CanModifyMeeting($ConferenceID)) {
  push @ErrorStack,$Msg_MeetNoModify;
}
 
# Checks on input parameters 

if ($Mode eq "create" || $Mode eq "modify") { 
  unless ($Short) {
    push @ErrorStack,$Msg_TopicNoShort;
  }      
  unless ($Long) {
    push @ErrorStack,$Msg_TopicNoLong;
  }      
  if ($URL && !(&ValidURL($URL))) {
    push @ErrorStack,"The URL $URL is not valid.";
  }
  unless ($EventGroupID) {
    push @ErrorStack,"You must select a group for this event.";
  }
  unless ($EndTime   && &ValidDate($EndDay,$ReverseAbrvMonth{$EndMonth},$EndYear)) {
    push @ErrorStack,"The event ending date is not valid.";
  }
  unless ($StartTime && &ValidDate($StartDay,$ReverseAbrvMonth{$StartMonth},$StartYear)) {
    push @ErrorStack,"The event starting date is not valid.";
  }
  if ($StartTime > $EndTime) {
    push @ErrorStack,"The event starting date is after the ending date.";
  }
}

my @CheckYears  = @SessionYears ;
my @CheckMonths = @SessionMonths;
my @CheckDays   = @SessionDays  ;
my @CheckTitles = @SessionTitles;

# FIXME: Here we require Title set, elsewhere or Description. Error if no Title

foreach my $CheckTitle (@CheckTitles) { # Check session times
  my $Year  = shift @CheckYears ;
  my $Month = shift @CheckMonths;
  my $Day   = shift @CheckDays  ;
  if ($CheckTitle) {
    my $Time = timelocal(0,0,0,$Day,$ReverseAbrvMonth{$Month}-1,$Year);
    unless ($Time && &ValidDate($Day,$ReverseAbrvMonth{$Month},$Year)) {
      push @ErrorStack,"The starting date for $CheckTitle is not valid.";
    }
    if ($Time > $EndTime) {
      push @ErrorStack,"The starting date for $CheckTitle is after the event ends.";
    }
    if ($Time < $StartTime) {
      push @ErrorStack,"The starting date for $CheckTitle is before the event starts.";
    }
  }
}  

&EndPage(@ErrorStack);

my $TopicsCreated     = 0;
my $MeetingsCreated   = 0;
my $SessionsCreated   = 0;
my $SeparatorsCreated = 0;
my $TopicsUpdated     = 0;
my $MeetingsUpdated   = 0;
my $SessionsUpdated   = 0;
my $SeparatorsUpdated = 0;
my $SessionsDeleted   = 0;
my $SeparatorsDeleted = 0;

if ($ConferenceID) {
  require "MeetingSQL.pm";
                            &FetchConferenceByConferenceID($ConferenceID);
  my @SessionIDs          = &FetchSessionsByConferenceID($ConferenceID);
  my @SessionSeparatorIDs = &FetchSessionSeparatorsByConferenceID($ConferenceID);
  my @MeetingOrderIDs     = &FetchMeetingOrdersByConferenceID($ConferenceID);
}     

if ($Mode eq "create" || $Mode eq "modify") {
  if ($Mode eq "create") { 
    my $ConferenceInsert = $dbh->prepare(
     "insert into Conference ".
     "(ConferenceID, EventGroupID, Location, URL, ShowAllTalks, StartDate, EndDate, ".
     " Preamble, Epilogue, Title, LongDescription) ". 
     "values (0,?,?,?,?,?,?,?,?,?,?)");
    $ConferenceInsert -> execute($EventGroupID,$Location,$URL,$ShowAllTalks,
                                 $StartDate,$EndDate,$MeetPreamble,
                                 $MeetEpilogue,$Short,$Long); 
    $ConferenceID = $ConferenceInsert -> {mysql_insertid}; # Works with MySQL only
    ++$MeetingsCreated;
  } elsif ($Mode eq "modify") {
    my $ConferenceUpdate = $dbh->prepare(
     "update Conference set ".
            "EventGroupID=?, Location=?, URL=?, ShowAllTalks=?, StartDate=?, EndDate=?, ".
            "Preamble=?, Epilogue=?, Title=?, LongDescription=? ". 
     "where ConferenceID=?");
    $ConferenceUpdate -> execute($EventGroupID,$Location,$URL,$ShowAllTalks,
                                 $StartDate,$EndDate,$MeetPreamble,
                                 $MeetEpilogue,$Short,$Long,$ConferenceID); 
    ++$MeetingsUpdated;
  }

  &MeetingSecurityUpdate(-mode         => 'access',
                         -conferenceid => $ConferenceID, 
                         -groupids     => \@MeetingViewGroupIDs);
  &MeetingSecurityUpdate(-mode         => 'modify',
                         -conferenceid => $ConferenceID, 
                         -groupids     => \@MeetingModifyGroupIDs);

# Repack check boxes into hashes

  my %SessionSeparatorFlags = ();
  foreach my $RawSessionSeparator (@RawSessionSeparators) { 
    $SessionSeparatorFlags{$RawSessionSeparator} = 1; 
  }  
  my %SessionDeleteFlags = ();
  foreach my $SessionDelete (@SessionDeletes) { 
    $SessionDeleteFlags{$SessionDelete} = 1; 
  }  
  
# Re-sort session orders

  my %SessionOrders = ();
  {
    foreach my $SessionOrder (@SessionOrders) {
      $SessionOrders{$SessionOrder} = $SessionOrder;
    } 
    my @OrderedOrders = sort numerically @SessionOrders;

    my $NewOrder = 1;
    foreach my $SessionOrder (@OrderedOrders) {
      $SessionOrders{$SessionOrder} = $NewOrder;
      ++$NewOrder;
    } 
  }
  
# Loop over sessions and insert
  
  foreach my $SessionOrder (@SessionOrders) {
    my $SessionYear        = shift @SessionYears         ;
    my $SessionMonth       = shift @SessionMonths        ;
    my $SessionDay         = shift @SessionDays          ;
    my $SessionHour        = shift @SessionHours         ;
    my $SessionLocation    = shift @SessionLocations     ;
    my $SessionTitle       = shift @SessionTitles        ;
    my $SessionDescription = shift @SessionDescriptions  ;
    my $MeetingOrderID     = shift @MeetingOrderIDs ;
    my $SessionNewOrder    = $SessionOrders{$SessionOrder};
    my $SessionDate        = "$SessionYear-$ReverseAbrvMonth{$SessionMonth}-$SessionDay $SessionHour:00";

    my $SessionSeparatorID = 0;
    my $SessionID          = 0;

    # Key on MeetingOrderID to see if we are going to insert or update.	
    if (grep /n/,$MeetingOrderID) {
      if ($SessionTitle || $SessionDescription) {
	if ($SessionSeparatorFlags{$MeetingOrderID}) {
          # Create a new separator
          my $SessionSeparatorInsert = $dbh -> prepare(
           "insert into SessionSeparator ".
           "(SessionSeparatorID, ConferenceID, StartTime, Location, Title, Description) ". 
           "values (0,?,?,?,?,?)");
          $SessionSeparatorInsert -> execute($ConferenceID,$SessionDate,$SessionLocation,$SessionTitle,$SessionDescription);
          $SessionSeparatorID = $SessionSeparatorInsert -> {mysql_insertid}; # Works with MySQL only
          ++$SeparatorsCreated;
	} else {
          # Create a new session
          my $SessionInsert = $dbh -> prepare(
           "insert into Session ".
                  "(SessionID, ConferenceID, StartTime, Location, Title, Description) ". 
           "values (0,?,?,?,?,?)");
          $SessionInsert          -> execute($ConferenceID,$SessionDate,$SessionLocation,$SessionTitle,$SessionDescription);
          $SessionID = $SessionInsert -> {mysql_insertid}; # Works with MySQL only
          ++$SessionsCreated;
	}
        # Insert the order of the session or separator
        my $MeetingOrderInsert = $dbh -> prepare(
         "insert into MeetingOrder ".
         "(MeetingOrderID, SessionOrder, SessionID, SessionSeparatorID) ". 
         "values (0,?,?,?)");
	$MeetingOrderInsert -> execute($SessionNewOrder,$SessionID,$SessionSeparatorID);
      }  
    } else {
      $SessionSeparatorID = $MeetingOrders{$MeetingOrderID}{SessionSeparatorID};
      $SessionID          = $MeetingOrders{$MeetingOrderID}{SessionID};

      # Find out if this session is flagged for deletion

      if ($SessionDeleteFlags{$MeetingOrderID}) { # Delete session or separator
	if ($SessionSeparatorID) {
          &DeleteSessionSeparator($SessionSeparatorID);
          ++$SeparatorsDeleted;
	} elsif ($SessionID) {
          &DeleteSession($SessionID);
          ++$SessionsDeleted;
	}
      } elsif ($SessionTitle || $SessionDescription) {
	if ($SessionSeparatorID) {
          my $SessionSeparatorUpdate = $dbh -> prepare(
           "update SessionSeparator set ".
           "StartTime=?, Location=?, Title=?, Description=? ". 
           "where SessionSeparatorID=?");
          $SessionSeparatorUpdate -> execute($SessionDate,$SessionLocation,$SessionTitle,$SessionDescription,$SessionSeparatorID);
	  ++$SeparatorsUpdated;
	} else {
          my $SessionUpdate = $dbh -> prepare(
           "update Session set ".
           "StartTime=?, Location=?, Title=?, Description=? ". 
           "where SessionID=?");
          $SessionUpdate          -> execute($SessionDate,$SessionLocation,$SessionTitle,$SessionDescription,$SessionID);
	  ++$SessionsUpdated;
	}
        my $MeetingOrderUpdate = $dbh -> prepare(
         "update MeetingOrder set SessionOrder=? where MeetingOrderID=?");
	$MeetingOrderUpdate -> execute($SessionNewOrder,$MeetingOrderID);
      } else {
        push @WarnStack,$Msg_SessionBlankDelete;
      }  
    }  
  }
  unless ($SessionsCreated   || $SessionsUpdated || 
          $SeparatorsCreated || $SeparatorsUpdated) {
    push @WarnStack,$Msg_MeetNoSessions; 
  }
}

&WarnPage(@WarnStack);
&EndPage(@ErrorStack);

# Print out diagnostics

if ($SessionsCreated   || $SessionsUpdated   || $SessionsDeleted   || 
    $SeparatorsCreated || $SeparatorsUpdated || $SeparatorsDeleted ||
    $MeetingsCreated   || $MeetingsUpdated) {
  print "<dl>\n";
  print "<dt><b>This meeting has been modified:</b>\n";
  if ($MeetingsCreated) {
    print "<dd>New meeting created";
  }
  if ($MeetingsUpdated) {
    print "<dd>Meeting modified";
  }
  if ($SessionsCreated   || $SessionsUpdated   || $SessionsDeleted) {
    print "<dd>";
    my @Numbers = ();
    my @Actions = ();
    if ($SessionsCreated) {
      push @Numbers,$SessionsCreated;
      push @Actions,"created";
    }  
    if ($SessionsUpdated) {
      push @Numbers,$SessionsUpdated;
      push @Actions,"modified";
    }  
    if ($SessionsDeleted) {
      push @Numbers,$SessionsDeleted;
      push @Actions,"deleted";
    } 
    my $Number = shift @Numbers;
    my $Action = shift @Actions;
    print "$Number session(s) $Action";
    foreach $Action (@Actions) {
      my $Number = shift @Numbers;
      print ", $Number $Action";
    }  
  }  
  if ($SeparatorsCreated   || $SeparatorsUpdated   || $SeparatorsDeleted) {
    print "<dd>";
    my @Numbers = ();
    my @Actions = ();
    if ($SeparatorsCreated) {
      push @Numbers,$SeparatorsCreated;
      push @Actions,"created";
    }  
    if ($SeparatorsUpdated) {
      push @Numbers,$SeparatorsUpdated;
      push @Actions,"modified";
    }  
    if ($SeparatorsDeleted) {
      push @Numbers,$SeparatorsDeleted;
      push @Actions,"deleted";
    } 
    my $Number = shift @Numbers;
    my $Action = shift @Actions;
    print "$Number break(s) $Action";
    foreach $Action (@Actions) {
      my $Number = shift @Numbers;
      print ", $Number $Action";
    }  
  }  
  print "</dl>\n";
  print "You can make more modifications, <b>modify session agendas</b> or <b><a href=\"$DisplayMeeting?conferenceid=$ConferenceID\">Display
         the Meeting</a></b>\n";
}    

print $query -> start_multipart_form('POST',"$MeetingModify");
print "<div>\n";
print $query -> hidden(-name => 'mode', -default => $SetMode);
if ($SetMode eq "modify") {
  print $query -> hidden(-name => 'conferenceid', -default => $ConferenceID);
}
print "</div>\n";

print "<table class=\"HighPaddedTable\">\n";

#FIXME: Make rest of these defaults "my"

my $DefaultEventGroupID     = $Conferences{$ConferenceID}{EventGroupID};
my $DefaultShortDescription = $Conferences{$ConferenceID}{Title};
$DefaultLongDescription     = $Conferences{$ConferenceID}{LongDescription};
$MeetingDefaultLocation     = $Conferences{$ConferenceID}{Location};
$MeetingDefaultURL          = $Conferences{$ConferenceID}{URL};
$MeetingDefaultPreamble     = $Conferences{$ConferenceID}{Preamble};
$MeetingDefaultEpilogue     = $Conferences{$ConferenceID}{Epilogue};
$MeetingDefaultShowAllTalks = $Conferences{$ConferenceID}{ShowAllTalks};
$DefaultStartDate           = $Conferences{$ConferenceID}{StartDate};
$DefaultEndDate             = $Conferences{$ConferenceID}{EndDate};

# Get deaults for meeting view/modify

my @MeetingViewDefaults   = ();
my @MeetingModifyDefaults = ();
my @MeetingViewIDs        = &GetMeetingSecurityGroups($ConferenceID);
my @MeetingModifyIDs      = &GetMeetingModifyGroups($ConferenceID);

foreach my $MeetingViewID (@MeetingViewIDs) {
  my $GroupID = $MeetingSecurities{$MeetingViewID}{GroupID};
  push @MeetingViewDefaults,$GroupID;
}
foreach my $MeetingModifyID (@MeetingModifyIDs) {
  my $GroupID = $MeetingModify{$MeetingModifyID}{GroupID};
  push @MeetingModifyDefaults,$GroupID;
}

print "<tr>\n";
 print "<td colspan=\"3\">Required fields are marked with $RequiredMark. \n";
 print "<a ";
 &HelpLink("meetingtopic");
 print "Click for an explanation.</a>\n";
 print "</td>\n";
print "</tr>\n";
print "<tr>\n";
print "<td>\n"; 
&EventGroupSelect(-required => $RequiredEntries{EventGroup}, -default => [$DefaultEventGroupID]);
print "</td>\n";
print "<td>\n";
&ShortDescriptionBox(-name => "shortdesc", -helptext => "Short Description", -required => $RequiredEntries{ShortDescription},
                     -default => $DefaultShortDescription);
&LongDescriptionBox(-required => $RequiredEntries{LongDescription});
&LocationBox;       
&EventURLBox;  
print "</td>\n";
print "<td>\n";
print "<div>\n";
&DateTimePulldown(-name => "start",         -required => $RequiredEntries{StartDate}, 
                  -helplink => "startdate", -helptext => "Start Date", -dateonly => $TRUE); 
print "</div><div>\n";
&DateTimePulldown(-name => "end",         -required => $RequiredEntries{EndDate}, 
                  -helplink => "enddate", -helptext => "End Date", -dateonly => $TRUE); 
print "</div><div>\n";
&ConferenceShowAllTalks;
print "</div>\n";
print "</td>\n";
print "</tr>\n";
print "</table>\n";

print "<table class=\"HighPaddedTable\">\n";

print "<tr>\n";
print "<td>\n"; &ConferencePreambleBox; print "</td>\n";
print "<td>\n"; 
&SecurityScroll(-addpublic => 'true',
              -name      => 'meetingviewgroups', 
              -helplink  => 'meetingviewgroups',
              -helptext  => 'Viewable by',
              -multiple  => true,
              -default   => \@MeetingViewDefaults,
              -size      => 8);
print "</td>\n";
print "</tr><tr>\n";
print "<td>\n"; &ConferenceEpilogueBox; print "</td>\n";
print "<td>\n"; 
&SecurityScroll(-name      => 'meetingmodifygroups', 
              -helplink  => 'meetingmodifygroups',
              -helptext  => 'Modifiable by',
              -multiple  => true,
              -default   => \@MeetingModifyDefaults,
              -size      => 8);
print "</td>\n";
print "</tr>\n";
print "</table>\n";
print "<table class=\"HighPaddedTable\">\n";

%Conferences       = ();
%Sessions          = ();
%SessionSeparators = ();
%MeetingOrderIDs   = ();

my $ConferenceID        = &FetchConferenceByConferenceID($ConferenceID);
my @SessionIDs          = &FetchSessionsByConferenceID($ConferenceID);
my @SessionSeparatorIDs = &FetchSessionSeparatorsByConferenceID($ConferenceID);
my @MeetingOrderIDs     = &FetchMeetingOrdersByConferenceID($ConferenceID);

@MeetingOrderIDs = sort MeetingOrderIDByOrder @MeetingOrderIDs;

print "<tr>\n";
print "<td colspan=\"2\">\n"; &SessionEntryForm($ConferenceID,@MeetingOrderIDs);   print "</td>\n";
print "</tr>\n";

print "<tr>\n";
print "<td class=\"SubmitCell\" colspan=\"2\">\n";
print $query -> submit (-value => "Modify Meeting and Sessions");
print "</td>\n";
print "</tr>\n";

print "</table>\n";
print $query -> end_multipart_form;

my ($NavBarText,$NavBarURL);
if ($ConferenceID) { # Only put modify link in if meeting already exists
  $NavBarText = "Display&nbsp;Meeting";
  $NavBarURL  = "$DisplayMeeting?conferenceid=$ConferenceID";
}  

&DocDBNavBar($NavBarText,$NavBarURL);
&DocDBFooter($DBWebMasterEmail,$DBWebMasterName);
 
exit;
