#
# Description: These are routines that are specific to your installation and 
#              should be customized for your needs. This file is a template
#              only. Make a copy of this file as ProjectRoutines.pm (no
#              "template") and make your changes there. 
#
#      Author: Eric Vaandering (ewv@fnal.gov)
#    Modified: 
#
# A global variable $Public is used (when set) to remove elements from the
# nav-bars that the public has no interest in. The variable is global
# and can control the style of your headers and footers too.
# 

sub DocDBHeader { 
  my ($Title,$PageTitle,$Search) = @_;
  
# This routine is reponsible for whatever you want to put as a header on the
# page. You can embed style sheets, project headers, navigation bars, etc.
# Basically you can use DocDBHeader, DocDBStyle, and DocDBFooter to make DocDB 
# web pages just like the web pages for the rest of your project.
# If you don't want to do any customization or just want to test DocDB, these
# routines work as-is.
# 
# $Title is for the <title> element while $PageTitle is the title of the page
# you may put in the text of the page. For $Search == 1, its necessary to put
# the onload event into the body tag to get the updating selection boxes
# on the search page. 
#
# The simplest possible routine should look something like this:

  unless ($PageTitle) {
    $PageTitle = $Title;
  }

  print "<html>\n";
  print "<head>\n";
  print "<title>$Title</title>\n";
  print "</head>\n";
  if ($Search) {
    print "<body onload=\"selectProduct(document.forms[\'queryform\']);\">\n";
  } else {  
    print "<body>\n";
  }
  print "<center>$PageTitle</center><p>\n";  
}

sub DocDBStyle { 
  my ($Title,$PageTitle,$Search) = @_;
  
# This routine is reponsible for setting the web page style for windows
# that are popped-up. (Help, Keyword chooser, signoff chooser (if used)).
# 
# $Title is for the <title> element. 
#
# If you really want your project's normal header on these pages, just
# &DocDBHeader($Title,$PageTitle,$Search); 
# Otherwise something like this is more appropriate

  print "<html>\n";
  print "<head>\n";
  print "<title>$Title</title>\n";
  print "</head>\n";

}

sub DocDBFooter {
  require "DocDBVersion.pm";

  my ($WebMasterEmail,$WebMasterName) = @_;

# This routine is reponsible for whatever you want to put as a footer on the
# page. 
#
# Parameters are supplied for the name and e-mail address of the person
# responsible for the pages

# You probably want to include some version of this:

  print "<p><small>\n";
  print "<a href=\"$DocDBHome\">DocDB</a> ";
  print "Version $DocDBVersion, contact \n";
  print "<i>\n";
  print "<A HREF=\"mailto:$WebMasterEmail\">$WebMasterName</A>\n";
  print "</i>\n";
  print "</small><br>\n";
  
# This prints benchmark info for pages that have it  
  
  if ($EndTime && $StartTime) {
    my $TimeDiff = timediff($EndTime,$StartTime);
    print "<small><b>Execution time: </b>",timestr($TimeDiff),"</small><br>\n";
  }

# while the simplest possible routine is just this:
  
  print "</body></html>\n";
}

sub DocDBNavBar {
  
# This routine prints the navigation bar just above the footer on the
# page. 
# This provides a good default, but you can customize for your installation 
# and include an optional extra description and URL (e.g. for a related page).


  my ($ExtraDesc,$ExtraURL) = @_;

  require "Security.pm";

  print "<div align=\"center\">\n";
  if ($ExtraDesc && $ExtraURL) {
    print "[&nbsp;<a href=\"$ExtraURL\"l>$ExtraDesc</a>&nbsp;]&nbsp;\n";
  } 
  print "[&nbsp;<a href=\"$MainPage\">DocDB&nbsp;Home</a>&nbsp;]&nbsp;\n";
  if (&CanCreate()) {
    print "[&nbsp;<a href=\"$DocumentAddForm?mode=add\">New</a>&nbsp;]&nbsp;\n";
  }
  print "[&nbsp;<a href=\"$SearchForm\">Search</a>&nbsp;]\n";
  print "[&nbsp;<a href=\"$LastModified?days=$LastDays\">Last&nbsp;$LastDays&nbsp;Days</a>&nbsp;]\n";
  print "[&nbsp;<a href=\"$ListAuthors\">List&nbsp;Authors</a>&nbsp;]\n";
  print "[&nbsp;<a href=\"$ListTopics\">List&nbsp;Topics</a>&nbsp;]\n";
  unless ($Public) {
    print "[&nbsp;<a href=\"$HelpFile\">Help</a>&nbsp;]\n";
#    print "[&nbsp;<a href=\"logout/LogOut\">Log Out</a>&nbsp;]\n";
  } 
  print "</div>\n";
}

sub ProjectReferenceLink (;$$$$) {
  my ($Acronym,$Volume,$Page,$ReferenceID) = @_;

# This routine is used to add links to and optionally replace the text of 
# references specific to the project.
# See ReferenceLink in ReferenceLinks.pm for examples.

  my $ReferenceLink = "";
  my $ReferenceText = "";

  return ($ReferenceLink,$ReferenceText);
}

# Often times groups may have CSS or other files that are used in Server
# Side Includes. This function replicates that functionality
  
#sub SSInclude {
#  my ($file) = @_;
#  open SSI,"$SSIDirectory$file";
#  my @SSI_lines = <SSI>;
#  close SSI;
#  print @SSI_lines;
#}

1;
